settings
{
	main
	{
		Description: "Reach the end of the map without being spotted.\r\nIf you are spotted, their laser will burn your @SS!\n\r\nThe burn damage is higher the closer you are to the\r checkpoints.\n\r\nThis is the NEW version with aesthetic interface + sphere status, more unique abilities\r added to almost all heros! New SEEKER POWERS coming soon.\nAnti-virus system in place.\n\r\nEdited by me, ColdAbyss\r with Cardi G. RIP to Momo!\r\n\r\nhttps://discord.gg/QsHayH\n\r\nCredits:\r\nYMHHG(Mod by Artel)\r\nShout out to the OG Klino and OG Author: XĔRX#216"
		Mode Name: "If I See You Move, You Die♡NEW"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Data Center Preference: Netherlands
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Spectators: 7
		Max Team 1 Players: 2
		Max Team 2 Players: 10
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Assault
		{
			Capture Speed Modifier: 20%
			Game Mode Start: Manual
			Hero Limit: Off
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled

			disabled maps
			{
				Hanamura
				Temple of Anubis
			}
		}

		Capture the Flag
		{
			Damage Interrupts Flag Interaction: On
			Flag Carrier Abilities: None
			Flag Dropped Lock Time: 10.0
			Flag Pickup Time: 5.0
			Flag Return Time: 5.0
			Flag Score Respawn Time: 20.0
			Game Mode Start: Manual
			Hero Limit: Off
			Score To Win: 9
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled
			Team Needs Flag At Base To Score: On

			disabled maps
			{
				Lijiang Control Center
				Lijiang Garden
				Lijiang Night Market
				Nepal Sanctum
			}
		}

		Clash
		{
			Capture Speed Modifier: 45%

			enabled maps
			{
			}
		}

		Control
		{
			Capture Speed Modifier: 20%
			Game Mode Start: Manual
			Hero Limit: Off
			Limit Valid Control Points: First
			Score To Win: 3
			Scoring Speed Modifier: 20%
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled

			enabled maps
			{
				Antarctic Peninsula 972777519512068153 972777519512068154
			}
		}

		Escort
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Payload Speed Modifier: 20%
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled
		}

		Flashpoint
		{
			Capture Speed Modifier: 20%
			Control Point A: Off
			Control Point B: Off
			Control Point C: Off
			Control Point D: Off
			Control Point E: Off
			Game Mode Start: Manual
			Hero Limit: Off
			Score To Win: 10
			Scoring Speed Modifier: 20%
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled
		}

		Hybrid
		{
			Capture Speed Modifier: 20%
			Game Mode Start: Manual
			Hero Limit: Off
			Payload Speed Modifier: 20%
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled
		}

		Push
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Spawn Health Packs: Enabled
			Tank Role Passive Health Bonus: Disabled
			TS-1 Push Speed Modifier: 20%
			TS-1 Walk Speed Modifier: 20%
		}
	}

	heroes
	{
		Team 1
		{
			Ana
			{
				Biotic Grenade Cooldown Time: 150%
				Primary Fire: Off
				Sleep Dart Cooldown Time: 25%
				Ultimate Ability Nano Boost: Off
			}

			D.Va
			{
				Boosters Cooldown Time: 350%
				Health: 52%
				Primary Fire: Off
				Ultimate Ability Self-Destruct: Off
			}

			Doomfist
			{
				Power Block Cooldown Time: 333%
				Primary Fire: Off
				Rocket Punch Cooldown Time: 300%
				Seismic Slam Cooldown Time: 250%
				Ultimate Duration: 60%
				Ultimate Generation Meteor Strike: 80%
			}

			Echo
			{
				Flight Cooldown Time: 500%
				Focusing Beam Cooldown Time: 500%
				Glide: Off
				Primary Fire: Off
				Sticky Bombs Cooldown Time: 300%
			}

			Genji
			{
				Deflect: Off
				Movement Speed: 92%
				Primary Fire: Off
				Secondary Fire: Off
				Swift Strike Cooldown Time: 150%
				Ultimate Generation - Passive Dragonblade: 300%
			}

			Hanzo
			{
				Lunge Distance Scalar: 175%
				Primary Fire: Off
				Storm Arrows: Off
			}

			Illari
			{
				Healing Dealt: 25%
				Healing Pylon: Off
				Outburst Cooldown Time: 80%
				Primary Fire: Off
				Secondary Fire: Off
			}

			Junker Queen
			{
				Commanding Shout Cooldown Time: 300%
				Jagged Blade Cooldown Time: 152%
			}

			Junkrat
			{
				Ammunition Clip Size Scalar: 30%
				Primary Fire: Off
				Steel Trap Cooldown Time: 200%
			}

			Kiriko
			{
				Protection Suzu: Off
				Secondary Fire: Off
				Swift Step Cooldown Time: 300%
				Swift Step Distance Scalar: 200%
				Ultimate Generation - Combat Kitsune Rush: 10%
				Ultimate Generation - Passive Kitsune Rush: 200%
				Ultimate Generation Kitsune Rush: 200%
			}

			Lifeweaver
			{
				Life Grip and Healing Blossom Range: 120%
				Life Grip Cooldown Time: 170%
				Petal Platform: Off
				Petal Platform Health: 25%
				Primary Fire: Off
				Rejuvenating Dash Healing: 0%
				Weapons Enabled: Healing Blossom Only
			}

			Lúcio
			{
				Amp It Up: Off
				Crossfade: Off
				Movement Speed: 92%
				Primary Fire: Off
				Soundwave Knockback Scalar: 60%
			}

			Mauga
			{
				Incendiary Chaingun: Off
				Overrun Cooldown Time: 150%
				Ultimate Generation Cage Fight: 120%
				Volatile Chaingun: Off
			}

			Mei
			{
				Blizzard Freeze Rate Scalar: 80%
				Cryo-Freeze: Off
				Ice Wall Cooldown Time: 150%
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Generation - Passive Blizzard: 200%
			}

			Mercy
			{
				Primary Fire: Off
				Resurrect Cooldown Time: 160%
				Ultimate Ability Valkyrie: Off
			}

			Moira
			{
				Biotic Orb: Off
				Fade Cooldown Time: 200%
				Secondary Fire: Off
			}

			Orisa
			{
				Fortify: Off
				Primary Fire: Off
			}

			Pharah
			{
				Concussive Blast: Off
				Concussive Blast Knockback Scalar: 150%
				Hover Jets Maximum Time: 80%
				Hover Jets Recharge Rate: 15%
				Jet Dash Cooldown Time: 200%
				Jump Jet: Off
				Jump Jet Acceleration Scalar: 65%
				Primary Fire: Off
			}

			Ramattra
			{
				Nemesis Form Cooldown Time: 300%
			}

			Reaper
			{
				Primary Fire: Off
			}

			Reinhardt
			{
				Charge Cooldown Time: 80%
				Movement Speed: 150%
			}

			Roadhog
			{
				Healing Received: 30%
				Pig Pen Cooldown Time: 220%
				Primary Fire: Off
				Take a Breather Maximum Time: 80%
				Take a Breather Recharge Rate: 80%
			}

			Sigma
			{
				Primary Fire: Off
				Ultimate Ability Gravitic Flux: Off
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 200%
				Helix Rockets Cooldown Time: 500%
				Helix Rockets Knockback Scalar: 400%
				Primary Fire: Off
				Ultimate Ability Tactical Visor: Off
			}

			Sombra
			{
				Hack Cooldown Time: 300%
				Primary Fire: Off
				Projectile Speed: 75%
				Translocator Cooldown Time: 150%
				Virus Cooldown Time: 500%
			}

			Symmetra
			{
				Sentry Turret Cooldown Time: 200%
				Teleporter: Off
			}

			Tracer
			{
				Blink: Off
				Health: 171%
				Primary Fire: Off
			}

			Venture
			{
				Burrow Cooldown Time: 80%
				Burrow Duration Scalar: 500%
				Drill Dash Cooldown Time: 150%
			}

			Widowmaker
			{
				Primary Fire: Off
				Venom Mine Cooldown Time: 200%
			}

			Zarya
			{
				Particle Barrier Cooldown Time: 50%
				Particle Cannon Secondary Knockback Scalar: 110%
				Primary Fire: Off
				Projected Barrier Cooldown Time: 400%
				Ultimate Ability Graviton Surge: Off
			}

			Zenyatta
			{
				Healing Dealt: 50%
				Orb of Discord: Off
				Primary Fire: Off
				Secondary Fire: Off
			}
		}

		Team 2
		{
			Primary Fire: Off

			Ana
			{
				Biotic Grenade Cooldown Time: 150%
				Primary Fire: Off
				Sleep Dart Cooldown Time: 25%
			}

			D.Va
			{
				Boosters Cooldown Time: 500%
				Health: 52%
				Primary Fire: Off
				Ultimate Ability Self-Destruct: Off
			}

			Doomfist
			{
				Power Block Cooldown Time: 333%
				Primary Fire: Off
				Rocket Punch Cooldown Time: 500%
				Seismic Slam Cooldown Time: 500%
				Ultimate Duration: 50%
				Ultimate Generation - Combat Meteor Strike: 0%
				Ultimate Generation Meteor Strike: 80%
			}

			Echo
			{
				Flight Cooldown Time: 500%
				Primary Fire: Off
				Sticky Bombs Cooldown Time: 300%
			}

			Genji
			{
				Deflect: Off
				Movement Speed: 92%
				Primary Fire: Off
				Secondary Fire: Off
				Swift Strike Cooldown Time: 500%
				Ultimate Generation - Passive Dragonblade: 300%
			}

			Hanzo
			{
				Primary Fire: Off
				Storm Arrows: Off
			}

			Illari
			{
				Healing Dealt: 35%
				Healing Pylon Cooldown Time: 250%
				Outburst Cooldown Time: 80%
				Primary Fire: Off
				Secondary Fire: Off
			}

			Junker Queen
			{
				Commanding Shout Cooldown Time: 300%
				Jagged Blade Cooldown Time: 350%
			}

			Junkrat
			{
				Ammunition Clip Size Scalar: 30%
				Primary Fire: Off
				Steel Trap Cooldown Time: 250%
			}

			Kiriko
			{
				Protection Suzu: Off
				Secondary Fire: Off
				Swift Step Cooldown Time: 300%
				Swift Step Distance Scalar: 60%
				Ultimate Generation - Combat Kitsune Rush: 10%
			}

			Lifeweaver
			{
				Life Grip and Healing Blossom Range: 120%
				Life Grip Cooldown Time: 170%
				Petal Platform Health: 25%
				Primary Fire: Off
				Rejuvenating Dash Healing: 0%
				Weapons Enabled: Healing Blossom Only
			}

			Lúcio
			{
				Amp It Up Cooldown Time: 500%
				Movement Speed: 92%
				Primary Fire: Off
				Soundwave Knockback Scalar: 200%
				Ultimate Generation Sound Barrier: 200%
			}

			Mauga
			{
				Incendiary Chaingun: Off
				Overrun Cooldown Time: 170%
				Overrun Knockback: 300%
				Ultimate Generation Cage Fight: 120%
				Volatile Chaingun: Off
			}

			Mei
			{
				Blizzard Freeze Rate Scalar: 80%
				Cryo-Freeze Cooldown Time: 175%
				Ice Wall Cooldown Time: 150%
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Generation - Passive Blizzard: 200%
			}

			Mercy
			{
				Healing Dealt: 25%
				Primary Fire: Off
				Resurrect Cooldown Time: 160%
				Secondary Fire: Off
				Ultimate Ability Valkyrie: Off
				Weapons Enabled: Caduceus Staff Only
			}

			Moira
			{
				Biotic Orb: Off
				Fade Cooldown Time: 500%
				Secondary Fire: Off
			}

			Orisa
			{
				Fortify Cooldown Time: 120%
				Primary Fire: Off
			}

			Pharah
			{
				Concussive Blast Cooldown Time: 150%
				Concussive Blast Knockback Scalar: 125%
				Hover Jets Maximum Time: 80%
				Hover Jets Recharge Rate: 15%
				Jump Jet: Off
				Jump Jet Acceleration Scalar: 65%
				Primary Fire: Off
			}

			Ramattra
			{
				Nemesis Form Cooldown Time: 300%
				Ravenous Vortex Cooldown Time: 500%
			}

			Reaper
			{
				Primary Fire: Off
				Shadow Step Cooldown Time: 300%
				Wraith Form Cooldown Time: 500%
			}

			Reinhardt
			{
				Charge Cooldown Time: 200%
				Movement Speed: 70%
			}

			Roadhog
			{
				Healing Dealt: 50%
				Pig Pen Cooldown Time: 220%
				Primary Fire: Off
				Take a Breather Maximum Time: 80%
				Take a Breather Recharge Rate: 80%
			}

			Sigma
			{
				Primary Fire: Off
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 200%
				Helix Rockets Cooldown Time: 500%
				Helix Rockets Knockback Scalar: 400%
				Primary Fire: Off
				Sprint: Off
				Ultimate Ability Tactical Visor: Off
			}

			Sombra
			{
				Hack Cooldown Time: 300%
				Primary Fire: Off
				Projectile Speed: 75%
				Translocator Cooldown Time: 500%
				Virus Cooldown Time: 500%
			}

			Symmetra
			{
				Sentry Turret Cooldown Time: 200%
				Teleporter Cooldown Time: 500%
			}

			Tracer
			{
				Blink: Off
				Health: 171%
				Primary Fire: Off
				Recall Cooldown Time: 10%
			}

			Venture
			{
				Burrow Cooldown Time: 200%
				Burrow Duration Scalar: 150%
				Drill Dash Cooldown Time: 250%
			}

			Widowmaker
			{
				Grappling Hook Cooldown Time: 200%
				Primary Fire: Off
				Venom Mine Cooldown Time: 500%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 25%
				Particle Barrier: Off
				Particle Cannon Secondary Knockback Scalar: 110%
				Primary Fire: Off
				Projected Barrier Cooldown Time: 400%
			}

			Zenyatta
			{
				Healing Dealt: 50%
				Primary Fire: Off
				Secondary Fire: Off
			}
		}

		General
		{
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 150%

			Ashe
			{
				Ammunition Clip Size Scalar: 25%
				Coach Gun Cooldown Time: 80%
				Coach Gun Knockback Scalar Self: 130%
				Dynamite Cooldown Time: 201%
				Dynamite Fuse Time Scalar: 10%
				Ultimate Ability B.O.B.: Off
			}

			Baptiste
			{
				Immortality Field: Off
				Primary Fire: Off
				Regenerative Burst: Off
				Secondary Fire: Off
			}

			Bastion
			{
				A-36 Tactical Grenade Cooldown Time: 150%
				A-36 Tactical Grenade Knockback Scalar: 160%
				Primary Fire: Off
				Reconfigure Cooldown Time: 150%
				Ultimate Generation Configuration: Artillery: 141%
			}

			Brigitte
			{
				Healing Dealt: 60%
				Primary Fire: Off
			}

			Cassidy
			{
				Combat Roll Cooldown Time: 60%
				Primary Fire: Off
				Secondary Fire: Off
			}

			Juno
			{
				Ammunition Clip Size Scalar: 25%
				Glide Boost Cooldown Time: 300%
				Hyper Ring Cooldown Time: 250%
			}

			Sojourn
			{
				Disruptor Shot Cooldown Time: 500%
				Power Slide Cooldown Time: 250%
			}

			Torbjörn
			{
				Deploy Turret: Off
				Overload Cooldown Time: 130%
				Secondary Fire: Off
				Weapons Enabled: Forge Hammer Only
			}

			Winston
			{
				Barrier Projector Cooldown Time: 180%
				Jump Pack Cooldown Time: 380%
				Primary Fire: Off
				Ultimate Duration: 60%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 115%
				Healing Received: 55%
				Health: 55%
				Piledriver: Off
				Primary Fire: Off
				Roll: Off
				Ultimate Ability Minefield: Off
			}
		}
	}

	workshop
	{
		Auto Switch Seekers and restart game: [1]
		Disable Killfeed: On
		Max. Players on Hero Ana: 10
		Max. Players on Hero Mercy: 3
		Mobile Safe Zone Duration: 5.000
		Mobile Safe Zone Radius: 7.000
		Mobile Safe Zones per Round: 1
		Reset resurrect cooldown of Mercy in spawn: On
		Security Camera Detection Radius: 90
		Sleep duration: 2.500
		Sombra Stealth Duration: 8.000
	}
}

variables
{
	global:
		0: endPos
		1: campingDistance
		2: currentRunners
		3: objectiveRadius
		4: scores
		5: scoreToWin
		6: roundLength
		7: noUltimateRadius
		8: roundInProgress
		9: orbwidow
		26: Seeker_Priority_List
		27: SWITCH_SEEKERS
		28: TutorialChapters
		29: CurrentSeekers
		30: i
		31: T1PlayerCount
		32: PlayerCount
		33: NextSeekers
		34: T2_Enabled_Heroes
		35: HERO_ANA_LIMIT
		36: HERO_MERCY_LIMIT
		37: ANTI_CAMPING_ENABLED
		38: TutorialTexts
		39: PROTECTION_DURATION
		40: RESTRICTED_ZONE_ENABLED
		41: REVEAL_RUNNER_POSITIONS
		42: bestRunner
		43: ENABLE_SECURITY_CAM
		44: HIGHLIGHT_FIRST_RUNNER
		45: HERO_ZARYA_LIMIT
		46: RESURRECT_SPEED_PENALTY
		47: NoSeekers
		48: RestartCountdown
		49: SPOTTED_DURATION
		50: TRACER_RECALLS_PER_ROUND
		51: MERCY_RESURRECT_RESET
		52: Checkpoints
		53: SECURITY_CAM_DETECT_RADIUS
		54: checkpointRadius
		55: CheckpointExtraTimeCount
		56: CheckpointExtraTime
		57: MobileSafeZonePos
		58: MOBILE_SAFE_ZONE_RADIUS
		59: MOBILE_SAFE_ZONE_DURATION
		60: MOBILE_SAFE_ZONES_PER_ROUND
		61: roundStartTime
		62: ANTI_CAMP_SLEEP_DURATION
		63: CLASSIC_ANTI_CAMP
		64: AntiCampSleepDuration
		65: CheckpointsPassed
		66: FinalGoalActive
		67: TotalTimeElapsed
		68: VersionDate
		69: SPOTTED_STATUS_BEHAVIOUR
		70: CheckpointRunnersPassed
		71: CheckpointRunnersPassedIndex
		72: DISABLE_KILLFEED
		73: DISABLE_SCOREBOARD
		74: ALLOW_THIRD_PERSON
		75: DISABLE_TEXTCHAT
		76: DISABLE_NAMEPLATES
		77: DISABLE_VOICECHAT
		78: DIST_MIN_SPOTTED_DURATION
		79: DIST_MAX_SPOTTED_DURATION
		80: SOMBRA_STEALTH_DURATION
		81: ServerLoad
		82: SEEKER_RESPAWN_COOLDOWN
		83: ClashMatchTime
		84: FilteredSeekers
		85: antiCrashActivated
		86: antiCrashStack
		87: RunnerExtraWaitTime
		88: Event_CD
		89: Event_true
		90: EventSelected
		91: Event_1
		92: Event_2
		93: Event_3
		94: Event_final
		95: Event_4
		96: Event_5
		97: Event_6
		98: Event_7
		99: EventLoop
		100: Custom_CD
		101: EventInProgress
		102: counter
		103: MiniEventsToggle
		104: greenredlights

	player:
		0: targetPlayer
		1: seen
		2: canBeSeen
		3: canSee
		4: Attacker
		5: Target_Arrow_ID
		6: Spell_Value2
		7: Spell_Value3
		8: Spell_Value4
		9: Spell_Effect1
		10: eblinded
		11: SymTPCoords
		14: SymVariable
		15: regulartext
		16: Doublejump
		26: Available_Heroes
		27: spotted
		28: TimeWatchedBySeekers
		29: IsBeingWatchedBySeekers
		30: SphereOfProtectionReady
		31: isProtected
		32: EntitiesArray
		33: ProtectedDuration
		34: CameraXPos
		35: CameraPos
		36: SecCamPos
		37: SecCamLookAtPos
		38: SeekerBeamColor
		39: SecCamLight_VisibleTo
		40: SecCamPreviewPos
		41: SecCamAlertOwner
		42: SecCamRunnersDetected
		43: DeathCount
		44: SecCamLookAtPosInit
		45: MoveSpeedPercent
		46: isUsingCamera
		47: spottedTimer
		48: TracerRecalls
		49: MercyResCD
		50: SecCamTrackingDisabled
		51: CheckpointsPassed
		52: PassedAllCheckpoints
		53: MobileSafeZonePos
		54: MobileSafeZoneCount
		55: SphereOfProtectionActive
		56: isInSafeZone
		57: isCamping
		58: SecCamLookAtAngleInit
		59: antiCampSleepStart
		60: lastPosition
		61: travelDistance
		62: SecCamLookAtHAngle
		63: lastPositionIndex
		64: spottedDuration
		65: spottedTimerStart
		66: showSpottedStatusProgressBar
		68: LucioWallrideStamina
		69: SoldierSprintStamina
		70: AbilityCountdown
		71: inFovOfSeeker
		72: isMoving
		73: RollCountdown
		74: LastHero
		75: RespawnCooldown
		76: FenceStartPos
		77: FenceEndPos
		78: ThirdPersonCamEnabled
		80: TimeNearSeeker
		81: isNearSeeker
		82: isAlive
		83: IsCampingRunner
		84: SecCamLookAtVAngle
		85: TutorialChapter
		86: TutorialText
		87: SpeedModification
		88: SetStatus1
		89: TutorialProgress
		90: SetStatus2
		91: TutorialTextIndex
		92: TutorialTextLineNum
		93: isCrowdControlled
		94: SphereOfProtectionProgressBar
		95: AbilityVar1
		96: infoToggle
		97: OrisaMount1
		98: OrisaMount2
		99: OrisaMount3
		100: SpeedModificationChange
		102: AbilityVar2
		103: vote_cd
		104: CustomEffects
		105: Target_Lock
		106: Target
}

subroutines
{
	0: CheckEndOfGame
	1: resetRound
	2: SwitchPlayers
	8: HighlightFirstRunner
	9: SpeedChangeRoutine
}

disabled rule("GLOBAL STARTUP ====================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Set final goal position and round length for each map")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.roundLength = 4 * 60;
		If(Current Map == Map(Route 66));
			Global.endPos = Vector(-92.580, 6.530, -23.470);
		Else If(Current Map == Map(Oasis City Center));
			Global.endPos = Vector(176.817, 3, 214.063);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Antarctic Peninsula));
			Global.endPos = Vector(194.623, 45, 173.693);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Oasis University));
			Global.endPos = Vector(-188.012, 16.400, -54.023);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Nepal Sanctum));
			Global.endPos = Vector(81.012, 130, 86.931);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Lijiang Garden Lunar New Year));
			Global.endPos = Vector(67.487, 95, 155.392);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Havana));
			Global.endPos = Vector(139.990, 6.060, -46.520);
			Global.roundLength = 5 * 60;
		Else If(Current Map == Map(Rialto));
			Global.endPos = Vector(-57.030, 2.800, -131.450);
			Global.roundLength = 4.500 * 60;
		Else If(Current Map == Map(Watchpoint: Gibraltar));
			Global.endPos = Vector(82.550, -0.480, 40.020);
			Global.roundLength = 4 * 60;
		Else If(Current Map == Map(Junkertown));
			Global.endPos = Vector(-92.780, 5.430, -118.980);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Dorado));
			Global.roundLength = 3 * 60;
			Global.endPos = Vector(184.100, 13.800, 40.780);
		Else If(Current Map == Map(Circuit royal));
			Global.endPos = Vector(98.310, 8.960, 18.290);
			Global.roundLength = 4.500 * 60;
		Else If(Current Map == Map(Hollywood));
			Global.endPos = Vector(-34.460, 1.750, -131.100);
			Global.roundLength = 4 * 60;
		Else If(Current Map == Map(Hollywood Halloween));
			Global.endPos = Vector(-34.460, 1.750, -131.100);
			Global.roundLength = 4 * 60;
		Else If(Current Map == Map(Paraíso));
			Global.endPos = Vector(-37.280, 0.850, -143.140);
			Global.roundLength = 4 * 60;
		Else If(Current Map == Map(Eichenwalde) || Current Map == Map(Eichenwalde Halloween));
			Global.endPos = Vector(123.300, 8.720, -27.480);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Blizzard World Winter));
			Global.roundLength = 4.500 * 60;
			Global.endPos = Vector(-122.090, -0.150, 110.540);
		Else If(Current Map == Map(King's Row) || Current Map == Map(King's Row Winter));
			Global.endPos = Vector(-149.140, -2.860, 24.230);
		Else If(Current Map == Map(Esperança));
			Global.endPos = Vector(82.620, -2.880, -62.890);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Shambali Monastery));
			Global.endPos = Vector(-38.260, 26.900, 182.300);
		Else If(Current Map == Map(Numbani));
			Global.endPos = Vector(207.200, -2.190, 22.340);
		Else If(Current Map == Map(Midtown));
			Global.endPos = Vector(128.250, 0.980, -65.770);
		Else If(Current Map == Map(Nepal Village));
			Global.endPos = Vector(-156, -97.500, 83);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Nepal Shrine));
			Global.endPos = Vector(-43, 16.370, 93);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Ilios Ruins));
			Global.endPos = Vector(130.700, 62.730, -160);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Busan Downtown Lunar New Year));
			Global.endPos = Vector(109.057, 15.930, -125.184);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Lijiang Night Market Lunar New Year));
			Global.endPos = Vector(61.311, 1.850, -28.357);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Colosseo));
			Global.endPos = Vector(-70.610, 7.200, -21.900);
			Global.roundLength = 2 * 60;
		Else If(Current Map == Map(Paris));
			Global.endPos = Vector(-54.350, 12.030, 13.880);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Horizon Lunar Colony));
			Global.endPos = Vector(57.130, 7.100, -54.896);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Ilios Well));
			Global.endPos = Vector(-179.384, -4.500, -66.104);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Ilios Lighthouse));
			Global.endPos = Vector(336.419, -25.400, 22.890);
			Global.roundLength = 3.500 * 60;
		Else If(Current Map == Map(New Queen Street));
			Global.endPos = Vector(74.975, 8.180, -24.651);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Lijiang Control Center Lunar New Year));
			Global.endPos = Vector(60.330, 266.500, 342.514);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Busan Sanctuary Lunar New Year));
			Global.endPos = Vector(-267.644, 9.200, 159.734);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Ayutthaya));
			Global.endPos = Vector(16, 1.200, 43.398);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Suravasa));
			Global.endPos = Vector(-76.830, 5.070, -41.040);
			Global.roundLength = 2 * 60;
		Else If(Current Map == Map(New Junk City));
			Global.endPos = Vector(-75.210, -0.940, -40.280);
			Global.roundLength = 2 * 60;
		Else If(Current Map == Map(Samoa));
			Global.endPos = Vector(-405.292, 3.660, -132.154);
			Global.roundLength = 2 * 60;
		Else If(Current Map == Map(Temple of Anubis));
			Global.endPos = Vector(0.628, -1, -11.428);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Volskaya Industries));
			Global.endPos = Vector(-42.382, -4, 7.881);
			Global.roundLength = 2.500 * 60;
		Else If(Current Map == Map(Oasis Gardens));
			Global.endPos = Vector(103.026, 9.400, -285.644);
			Global.roundLength = 3 * 60;
			"Hanaoka"
			disabled Else If(Current Map == Map(Hanamura));
			disabled Global.endPos = Vector(-5.050, 41.120, -107.780);
			disabled Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Global.endPos = Vector(61.738, -0.621, 13.063);
			Global.roundLength = 3 * 60;
		Else If(Current Map == Map(Runasapi));
			Global.endPos = Vector(-83.371, 4.060, 23.206);
			Global.roundLength = 3 * 60;
			Global.RunnerExtraWaitTime = 2;
		Else;
			Global.endPos = Vector(-122.090, -0.150, 110.540);
		End;
		Global.ClashMatchTime = Global.roundLength;
	}
}

rule("Global effects and texts")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		If(Global.Checkpoints != Null);
			Create Effect(Team Of(Local Player) == Team 1 ? Local Player : (Local Player.PassedAllCheckpoints ? Local Player : Null),
				Light Shaft, Team Of(Local Player) == Team 1 ? (Global.FinalGoalActive ? Color(Red) : Color(Black)) : Color(Green),
				Global.endPos + Vector(0, -1, 0), Global.objectiveRadius, Visible To and Color);
			Create In-World Text(All Players(Team 1), Custom String("{0} Final Goal {0}", Icon String(Stop)), Global.endPos + Vector(0, 10, 0),
				1.500, Do Not Clip, Visible To and Color, Global.FinalGoalActive ? Color(Red) : Custom Color(255, 255, 255, 100),
				Default Visibility);
			Create In-World Text(Global.FinalGoalActive ? Null : All Players(Team 1), Custom String("(inactive)", Icon String(Stop)),
				Global.endPos + Vector(0, 8, 0), 1, Do Not Clip, Visible To and Color, Global.FinalGoalActive ? Color(Red) : Custom Color(255,
				255, 255, 100), Default Visibility);
			Create Effect(Team Of(Local Player) == Team 1 ? (Global.FinalGoalActive ? Local Player : Null) : (
				Local Player.PassedAllCheckpoints ? Local Player : Null), Light Shaft, Color(Gray), Global.endPos + Vector(0, -10, 0),
				Global.noUltimateRadius, Visible To and Color);
			Create In-World Text(Global.roundInProgress ? (Team Of(Local Player)
				== Team 2 && Local Player.PassedAllCheckpoints ? Local Player : Null) : Null, Custom String("{0} Final Goal {0}", Icon String(
				Flag)), Global.endPos + Vector(0, 5, 0), 1.500, Do Not Clip, Visible To String and Color, Team Of(Local Player)
				== Team 1 ? Color(Red) : Color(Green), Default Visibility);
			Create In-World Text(Global.roundInProgress ? (Team Of(Local Player) == Team 2 ? Local Player : Null) : Null, Custom String(
				"Distance: {0}m", Distance Between(Position Of(Local Player),
				Local Player.PassedAllCheckpoints ? Global.endPos : Global.Checkpoints[Local Player.CheckpointsPassed]) - (
				Local Player.PassedAllCheckpoints ? Global.objectiveRadius : Global.checkpointRadius)),
				Local Player.PassedAllCheckpoints ? Global.endPos + Vector(0, 3, 0)
				: Global.Checkpoints[Local Player.CheckpointsPassed] + Vector(0, 3, 0), 1, Do Not Clip, Visible To Position String and Color,
				Team Of(Local Player) == Team 1 ? Color(Red) : Color(Green), Default Visibility);
		Else;
			Create Effect(All Players(All Teams), Light Shaft, Team Of(Local Player) == Team 1 ? Color(Red) : Color(Green),
				Global.endPos + Vector(0, -1, 0), Global.objectiveRadius, Visible To and Color);
			Create In-World Text(All Players(Team 2), Custom String("{0} Final Goal {0}", Icon String(Flag)), Global.endPos + Vector(0, 6, 0),
				1.500, Do Not Clip, Visible To Position String and Color, Color(Green), Default Visibility);
			Create In-World Text(All Players(Team 1), Custom String("{0} Final Goal {0}", Icon String(Stop)), Global.endPos + Vector(0, 6, 0),
				1.500, Do Not Clip, Visible To and Color, Color(Red), Default Visibility);
			Create Effect(All Players(All Teams), Light Shaft, Color(Gray), Global.endPos + Vector(0, -10, 0), Global.noUltimateRadius,
				Visible To Position Radius and Color);
			Create In-World Text(Global.roundInProgress ? All Players(All Teams) : Null, Custom String("Distance: {0}m", Distance Between(
				Position Of(Local Player), Global.endPos) - Global.objectiveRadius), Global.endPos + Vector(0, 3, 0), 1, Do Not Clip,
				Visible To Position String and Color, Team Of(Local Player) == Team 1 ? Color(Red) : Color(Green), Default Visibility);
		End;
		"Scoreboard"
		Create HUD Text(All Players(All Teams), Custom String("Seekers [{0}] | [{1}] Runners", Global.scores[0], Global.scores[1]),
			Custom String("Runners left: {0}", Count Of(Filtered Array(Global.currentRunners, Entity Exists(Current Array Element)
			&& Is Alive(Current Array Element)))), Custom String("Time left: {0}", Current Game Mode != Game Mode(Clash)
			? Round To Integer(Match Time, Down) : Global.ClashMatchTime), Top, -2, Custom Color(20, 200, 255, 255), Color(White),
			Match Time <= 60 ? Color(Red) : Color(White), Visible To String and Color, Default Visibility);
		Create HUD Text(All Living Players(Team 2), Null, Custom String(" "), Null, Top, -1, Null, Null, Null, Visible To,
			Default Visibility);
		Create HUD Text(Global.NoSeekers ? All Players(All Teams) : Null, Null, Null, Custom String(
			"{0} No Seekers. Hold [{1}] if you want to seek for the remaining match, otherwise the game will restart in {2} seconds {0}",
			Icon String(Warning), Input Binding String(Button(Reload)), Round To Integer(Global.RestartCountdown, Up)), Top, 10, Color(
			White), Color(Yellow), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(Number Of Players(Team 1) == 1 && Number Of Players(Team 2) >= 7 ? All Players(Team 2) : Null, Null, Custom String(
			"{0} Only one Seeker: Hold [{1}] to switch teams {0}", Icon String(Warning), Input Binding String(Button(Reload))), Null,
			Right, -11, Color(White), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Wait(0.016, Ignore Condition);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialProgress),
			Global.TutorialChapters[Local Player.TutorialChapter], Update Every Frame(Eye Position(Local Player) + 100 * (
			0 * World Vector Of(Right, Local Player, Rotation) + (0.800 - 0.200) * Direction From Angles(Horizontal Angle From Direction(
			Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)
			+ 3 * Facing Direction Of(Local Player))), 1.800, Do Not Clip, Visible To Position String and Color, Custom Color(90, 150, 255,
			255), Visible Never);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialProgress), Custom String("{0}",
			Global.TutorialTexts[Local Player.TutorialText[0]], Global.TutorialTexts[Local Player.TutorialText[1]],
			Global.TutorialTexts[Local Player.TutorialText[2]]), Update Every Frame(Eye Position(Local Player) + 100 * (
			0 * World Vector Of(Right, Local Player, Rotation) + (0.450 - 0.200) * Direction From Angles(Horizontal Angle From Direction(
			Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)
			+ 3 * Facing Direction Of(Local Player))), 1.500, Do Not Clip, Visible To Position String and Color, Color(White),
			Visible Never);
		Create In-World Text(Filtered Array(All Players(All Teams), Local Player.TutorialText[2]), Custom String(
			">>> Press [{0}] to continue with the tutorial or [{1}] to abort <<<", Input Binding String(Button(Primary Fire)),
			Input Binding String(Button(Secondary Fire))), Update Every Frame(Eye Position(Local Player) + 100 * (0 * World Vector Of(
			Right, Local Player, Rotation) + (-0.100 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(
			Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 3 * Facing Direction Of(
			Local Player))), 1.250, Do Not Clip, Visible To Position String and Color, Color(Yellow), Visible Never);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialProgress), Custom String("{1}",
			Global.TutorialTexts[Local Player.TutorialText[0]], Global.TutorialTexts[Local Player.TutorialText[1]],
			Global.TutorialTexts[Local Player.TutorialText[2]]), Update Every Frame(Eye Position(Local Player) + 100 * (
			0 * World Vector Of(Right, Local Player, Rotation) + (0.300 - 0.200) * Direction From Angles(Horizontal Angle From Direction(
			Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)
			+ 3 * Facing Direction Of(Local Player))), 1.500, Do Not Clip, Visible To Position String and Color, Color(White),
			Visible Never);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialProgress), Custom String("{2}",
			Global.TutorialTexts[Local Player.TutorialText[0]], Global.TutorialTexts[Local Player.TutorialText[1]],
			Global.TutorialTexts[Local Player.TutorialText[2]]), Update Every Frame(Eye Position(Local Player) + 100 * (
			0 * World Vector Of(Right, Local Player, Rotation) + (0.150 - 0.200) * Direction From Angles(Horizontal Angle From Direction(
			Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)
			+ 3 * Facing Direction Of(Local Player))), 1.500, Do Not Clip, Visible To Position String and Color, Color(White),
			Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 2), Is In Spawn Room(Local Player) && !Local Player.TutorialProgress), Null, Null,
			Custom String("{0} Hold [{1}] + [{2}] to start the tutorial {0}", Icon String(Exclamation Mark), Input Binding String(Button(
			Interact)), Input Binding String(Button(Melee))), Top, 10, Color(White), Color(White), Color(Sky Blue), Visible To and String,
			Default Visibility);
	}
}

rule("Seekers win the round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundInProgress == True;
		Total Time Elapsed - Global.roundStartTime >= 15;
		((Count Of(Global.currentRunners) && Count Of(Filtered Array(Global.currentRunners, Entity Exists(Current Array Element)
			&& Is Alive(Current Array Element))) <= 0) || (Game Mode(Clash)
			!= Current Game Mode ? Match Time <= 0.500 : Global.ClashMatchTime <= 0)) == True;
	}

	actions
	{
		Global.roundInProgress = False;
		Global.scores[0] += 1;
		Big Message(All Players(All Teams), Global.scoreToWin == Global.scores[0] ? Custom String("Seekers win the match!")
			: Custom String("Seekers win the round!"));
		Start Rule(CheckEndOfGame, Restart Rule);
	}
}

rule("Reset round")
{
	event
	{
		Subroutine;
		resetRound;
	}

	actions
	{
		Global.Event_CD = Null;
		Global.Event_true = Null;
		Global.EventSelected = Null;
		Global.Event_1 = Null;
		Global.Event_2 = Null;
		Global.Event_3 = Null;
		Global.Event_final = Null;
		Global.Event_4 = Null;
		Global.Event_5 = Null;
		Global.Event_6 = Null;
		Global.Event_7 = Null;
		Global.EventLoop = Null;
		Global.Custom_CD = Null;
		Global.EventInProgress = Null;
		Global.counter = Null;
		Global.MiniEventsToggle = Null;
		Global.greenredlights = Null;
		Global.roundInProgress = False;
		Stop Forcing Player Position(All Players(All Teams));
		Set Invisible(All Players(All Teams), None);
		Cancel Primary Action(All Players(All Teams));
		Wait(0.032, Ignore Condition);
		Destroy Effect(Event Player.CustomEffects);
		Respawn(All Players(All Teams));
		Wait(0.250, Ignore Condition);
		Respawn(Filtered Array(All Players(All Teams), Is In Spawn Room(Current Array Element) != True));
		Clear Status(All Players(All Teams), Stunned);
		Clear Status(All Players(All Teams), Asleep);
		Clear Status(All Players(All Teams), Knocked Down);
		Set Ability Cooldown(All Players(All Teams), Button(Primary Fire), 0);
		Set Ability Cooldown(All Players(All Teams), Button(Secondary Fire), 0);
		Set Ability Cooldown(All Players(All Teams), Button(Ability 1), 0);
		Set Ability Cooldown(All Players(All Teams), Button(Ability 2), 0);
		Allow Button(All Players(All Teams), Button(Interact));
		Wait(0.016, Ignore Condition);
		Enable Hero HUD(All Players(All Teams));
		Set Status(All Players(Team 2), Null, Rooted, 999);
		Set Ability Cooldown(All Players(All Teams), Button(Ability 2), 0);
		All Players(All Teams).RespawnCooldown = Global.SEEKER_RESPAWN_COOLDOWN;
		All Players(All Teams).MercyResCD = 0;
		Global.MobileSafeZonePos = Null;
		Global.CheckpointsPassed = 0;
		All Players(All Teams).SecCamPos = Null;
		All Players(All Teams).SoldierSprintStamina = 0;
		All Players(All Teams).LucioWallrideStamina = 0;
		Wait(0.016, Ignore Condition);
		All Players(All Teams).isProtected = 0;
		All Players(All Teams).TracerRecalls = 0;
		All Players(All Teams).SphereOfProtectionReady = 0;
		All Players(All Teams).TimeWatchedBySeekers = 0;
		All Players(All Teams).MobileSafeZoneCount = 0;
		If(Global.Checkpoints != Null);
			Global.CheckpointExtraTimeCount = 0;
			All Players(All Teams).CheckpointsPassed = 0;
			All Players(All Teams).PassedAllCheckpoints = False;
		End;
		Global.currentRunners = Empty Array;
		Set Match Time(Global.roundLength);
		disabled Skip If(Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))) >= 1, 2);
		Wait(0.250, Ignore Condition);
		disabled Big Message(All Players(Team 2), Custom String("Waiting for Seekers.."));
		Wait(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)) ? 0.100 : 0, Ignore Condition);
		While(Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && !Is In Spawn Room(Current Array Element)))
			< 1 && Global.roundLength - Match Time < 8);
			Set Status(All Players(Team 2), Null, Rooted, 999);
			Wait(0.100, Ignore Condition);
			Wait(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)) ? 0.100 : 0, Ignore Condition);
		End;
		Wait(Global.RunnerExtraWaitTime, Ignore Condition);
		Big Message(All Players(Team 2), Custom String("Ready.."));
		Wait(1.500, Ignore Condition);
		Big Message(All Players(Team 2), Custom String("Go!"));
		Wait(0.300, Ignore Condition);
		Set Match Time(Global.roundLength);
		Global.roundStartTime = Total Time Elapsed;
		Global.roundInProgress = True;
		Global.ClashMatchTime = Global.roundLength;
		Clear Status(All Players(Team 2), Rooted);
		Wait(1, Ignore Condition);
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Announcer;
	}
}

rule("RUNNER JOINS GAME")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
		If(Global.Checkpoints == Null);
			Event Player.PassedAllCheckpoints = True;
		End;
		"Check if there are any runners before player has spawned"
		If(Count Of(Global.currentRunners) > 0);
			Wait Until(Has Spawned(Event Player), 99999);
			Wait(0.100, Ignore Condition);
			"Check if there are any runners after the player has spawned"
			If(Count Of(Global.currentRunners) > 0 && (Count Of(Filtered Array(Global.currentRunners, Is Alive(Current Array Element)))
				* 100 / Count Of(Global.currentRunners) <= 50 || (Current Game Mode != Game Mode(Clash) ? Match Time : Global.ClashMatchTime)
				* 100 / Global.roundLength <= 80));
				Set Status(Event Player, Null, Rooted, 5);
				Wait(0.100, Ignore Condition);
				Big Message(Event Player, Custom String("Wait for the next round to start"));
				While(Is Alive(Event Player));
					Kill(Event Player, Null);
					Wait(1, Ignore Condition);
				End;
				Abort;
			End;
		End;
		Wait Until(Has Spawned(Event Player), 99999);
		Wait(2, Ignore Condition);
		Small Message(Event Player, Custom String("  Get to the green objective. Don't get spotted by the Seekers"));
		If(Global.Checkpoints != Null);
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("  Pass the checkpoints to activate the final goal"));
		End;
		If(Global.ALLOW_THIRD_PERSON);
			Wait(2, Ignore Condition);
			Small Message(Event Player, Custom String("  Hold [{0}] + [{1}] to toggle 3rd person cam", Input Binding String(Button(Crouch)),
				Input Binding String(Button(Interact))));
		End;
	}
}

rule("Match Time for Clash maps")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Clash);
		Global.roundInProgress == True;
	}

	actions
	{
		Global.ClashMatchTime -= 1;
		Wait(1, Ignore Condition);
		Loop;
	}
}

rule("Match time <= 15s: Play sound effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		(Current Game Mode != Game Mode(Clash) ? Match Time <= 16 : Global.ClashMatchTime <= 15) == True;
	}

	actions
	{
		While((Game Mode(Clash) != Current Game Mode ? Match Time <= 16 : Global.ClashMatchTime <= 15) && (Game Mode(Clash)
			!= Current Game Mode ? Match Time >= 1 : Global.ClashMatchTime >= 1));
			Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 80 - 3.500 * (Current Game Mode != Game Mode(Clash)
				? Match Time : Global.ClashMatchTime));
			Wait(1, Ignore Condition);
		End;
		Abort If(Global.bestRunner);
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 100);
	}
}

rule("Waiting for players")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Waiting For Players == True;
		Number Of Players(Team 1) > 0;
		Number Of Players(Team 2) > 0;
	}

	actions
	{
		Start Game Mode;
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Skip assembling heroes and setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(10);
		Wait Until(Is In Setup, 99999);
		Set Match Time(0);
		Start Rule(resetRound, Restart Rule);
	}
}

rule("Global init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.VersionDate = Custom String("v3.9♥ (2024-09-16)");
		Disable Inspector Recording;
		Global.SPOTTED_STATUS_BEHAVIOUR = Workshop Setting Combo(Custom String("Runners"), Custom String("Spotted status behaviour"), 0,
			Array(Custom String("Spotted duration based on distance traveled"), Custom String("Fixed spotted duration"), Custom String(
			"Fixed spotted duration + clear instantly if out of sight")), -2);
		Global.ANTI_CAMP_SLEEP_DURATION = Workshop Setting Real(Custom String("Anti-Camping"), Custom String("Sleep duration"), 6, 1, 20,
			0);
		Global.CLASSIC_ANTI_CAMP = Workshop Setting Toggle(Custom String("Anti-Camping"), Custom String(
			"Use classic anti-camping mechanic"), False, -1);
		Global.HIGHLIGHT_FIRST_RUNNER = Workshop Setting Toggle(Custom String("Runners"), Custom String(
			"Highlight the Runner who reached the goal first"), True, 0);
		Global.MOBILE_SAFE_ZONE_DURATION = Workshop Setting Real(Custom String("Runners"), Custom String("Mobile Safe Zone Duration"), 5,
			1, 20, 0);
		Global.MOBILE_SAFE_ZONES_PER_ROUND = Workshop Setting Integer(Custom String("Runners"), Custom String(
			"Mobile Safe Zones per Round"), 0, 0, 10, 0);
		Global.MOBILE_SAFE_ZONE_RADIUS = Workshop Setting Real(Custom String("Runners"), Custom String("Mobile Safe Zone Radius"), 5, 1,
			10, 0);
		Global.MERCY_RESURRECT_RESET = Workshop Setting Toggle(Custom String("Runners"), Custom String(
			"Reset resurrect cooldown of Mercy in spawn"), False, 0);
		Global.TRACER_RECALLS_PER_ROUND = Workshop Setting Integer(Custom String("Runners"), Custom String("Recalls for Tracer per Round"),
			1, 0, 10, 0);
		Global.SPOTTED_DURATION = Workshop Setting Real(Custom String("Runners"), Custom String("Fixed spotted duration (in seconds)"),
			1.200, 0, 10, -1);
		Global.RESURRECT_SPEED_PENALTY = Workshop Setting Toggle(Custom String("Runners"), Custom String(
			"Movement speed penalty after resurrect"), True, 0);
		Global.SWITCH_SEEKERS = Workshop Setting Combo(Custom String("General"), Custom String("Auto Switch Seekers and restart game"), 2,
			Array(Custom String("Never"), Custom String("Immediately"), Custom String("After POTG")), 0);
		Global.T2_Enabled_Heroes = All Heroes;
		Global.HERO_ZARYA_LIMIT = Workshop Setting Integer(Custom String("Runners"), Custom String("Max. Players on Hero Zarya"), 2, 1, 10,
			4);
		Global.HERO_ANA_LIMIT = Workshop Setting Integer(Custom String("Runners"), Custom String("Max. Players on Hero Ana"), 2, 1, 10, 3);
		Global.HERO_MERCY_LIMIT = Workshop Setting Integer(Custom String("Runners"), Custom String("Max. Players on Hero Mercy"), 2, 1, 10,
			4);
		Global.ENABLE_SECURITY_CAM = Workshop Setting Toggle(Custom String("Seekers"), Custom String("Enable Security Camera"), True, 0);
		Global.SECURITY_CAM_DETECT_RADIUS = Workshop Setting Integer(Custom String("Seekers"), Custom String(
			"Security Camera Detection Radius"), 30, 5, 100, 0);
		Global.ANTI_CAMPING_ENABLED = Workshop Setting Toggle(Custom String("Anti-Camping"), Custom String(
			"Use extended Anti-Camping mechanic (Sphere of Protection)"), True, 1);
		Global.REVEAL_RUNNER_POSITIONS = Workshop Setting Toggle(Custom String("Runners"), Custom String(
			"Reveal positions of Runners to Seekers (as Hero Icon)"), False, 1);
		disabled Global.RESTRICTED_ZONE_ENABLED = Workshop Setting Toggle(Custom String("Runners"), Custom String(
			"Prevent Runners from using their Ultimate around the Goal"), True, 1);
		Global.PROTECTION_DURATION = Workshop Setting Integer(Custom String("Anti-Camping"), Custom String(
			"Sphere of Protection Duration (in seconds)"), 4, 1, 10, 3);
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		disabled Disable Built-In Game Mode Music;
		Start Damage Modification(All Players(Team 1), All Players(Team 2), 0.100, Receivers and Damagers);
		Start Damage Modification(All Players(Team 2), All Players(Team 1), 80, Receivers and Damagers);
		Global.checkpointRadius = 12;
		Global.campingDistance = 15;
		Global.currentRunners = Empty Array;
		Global.objectiveRadius = 5;
		Global.noUltimateRadius = 20;
		"0: seeker score, 1: runner score"
		Global.scores = Array(0, 0);
		Global.scoreToWin = 3;
		"Scale based on distance needed to travel"
		disabled Global.roundLength = Max(Distance Between(Position Of(Random Value In Array(Spawn Points(Team 2))), Global.endPos) / 45, 2.500)
			* 60;
		"Everyone uses first spawn room only"
		Start Forcing Spawn Room(All Teams, 0);
		Start Healing Modification(All Players(Team 1), All Players(Team 1), 0, Receivers Healers and Healing Percent);
		Global.DISABLE_KILLFEED = Workshop Setting Toggle(Custom String("Privacy Settings"), Custom String("Disable Killfeed"), False, 0);
		Global.DISABLE_TEXTCHAT = Workshop Setting Combo(Custom String("Privacy Settings"), Custom String("Disable text chat"), 0, Array(
			Custom String("Do not disable"), Custom String("For both Teams"), Custom String("For Runners only")), 0);
		Global.DISABLE_SCOREBOARD = Workshop Setting Combo(Custom String("Privacy Settings"), Custom String("Disable scoreboard"), 0,
			Array(Custom String("Do not disable"), Custom String("For both Teams"), Custom String("For Runners only")), 0);
		Global.DISABLE_VOICECHAT = Workshop Setting Combo(Custom String("Privacy Settings"), Custom String("Disable voice chat"), 0, Array(
			Custom String("Do not disable"), Custom String("For both Teams"), Custom String("For Runners only")), 0);
		Global.DISABLE_NAMEPLATES = Workshop Setting Combo(Custom String("Privacy Settings"), Custom String("Disable nameplates"), 0,
			Array(Custom String("Do not disable"), Custom String("For both Teams"), Custom String("For Runners only")), 0);
		Global.DIST_MIN_SPOTTED_DURATION = Workshop Setting Real(Custom String("Runners"), Custom String(
			"Min. spotted duration (Distance based only)"), 0.200, 0, 5, 0);
		Global.DIST_MAX_SPOTTED_DURATION = Workshop Setting Real(Custom String("Runners"), Custom String(
			"Max. spotted duration (Distance based only)"), 1.300, 0.200, 20, 0);
		Global.SOMBRA_STEALTH_DURATION = Workshop Setting Real(Custom String("Runners"), Custom String("Sombra Stealth Duration"), 8, 1,
			20, 0);
		Global.SEEKER_RESPAWN_COOLDOWN = Total Time Elapsed + Workshop Setting Integer(Custom String("Seekers"), Custom String(
			"Respawn Cooldown"), 45, 0, 500, 1);
		Global.ALLOW_THIRD_PERSON = Workshop Setting Toggle(Custom String("Runners"), Custom String("Allow third person camera"), True, 0);
	}
}

rule("Create checkpoints")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.CheckpointExtraTime = 60;
		If(Current Map == Map(Busan Downtown Lunar New Year));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-3.969, 15.930, -125.191));
			disabled Modify Global Variable(Checkpoints, Append To Array, Vector(52.119, 6, -92.455));
		Else If(Current Map == Map(Antarctic Peninsula));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(345.564, 46.078, 174.820));
		Else If(Current Map == Map(Lijiang Garden Lunar New Year));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-72.394, 95, 147.041));
		Else If(Current Map == Map(Oasis Gardens));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(172.799, 9.241, -178.446));
		Else If(Current Map == Map(Volskaya Industries));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 8;
			Global.CheckpointExtraTime = 40;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-94.314, 0, 49.222));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-13.681, -2.294, 90.272));
		Else If(Current Map == Map(Temple of Anubis));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-7.365, 6.071, 112.588));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-45.444, 1, 43.359));
		Else If(Current Map == Map(Lijiang Garden Lunar New Year));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-72.394, 95, 147.041));
		Else If(Current Map == Map(Oasis Gardens));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(172.799, 9.241, -178.446));
		Else If(Current Map == Map(Volskaya Industries));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-94.314, 0, 49.222));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-13.681, -2.294, 90.272));
		Else If(Current Map == Map(Temple of Anubis));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-7.365, 6.071, 112.588));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-45.444, 1, 43.359));
		Else If(Current Map == Map(Lijiang Garden Lunar New Year));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-72.394, 95, 147.041));
		Else If(Current Map == Map(Oasis Gardens));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(172.799, 9.241, -178.446));
		Else If(Current Map == Map(Volskaya Industries));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-94.314, 0, 49.222));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-13.681, -2.294, 90.272));
		Else If(Current Map == Map(Temple of Anubis));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-7.365, 6.071, 112.588));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-45.444, 1, 43.359));
		Else If(Current Map == Map(Oasis University));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-201.254, 16, 59.012));
		Else If(Current Map == Map(Oasis City Center));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(106.680, 2, 284.346));
		Else If(Current Map == Map(Lijiang Night Market Lunar New Year));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-69.221, 2.900, -22.697));
			Modify Global Variable(Checkpoints, Append To Array, Vector(1.053, -1, -60.947));
		Else If(Current Map == Map(Colosseo));
			Global.Checkpoints = Empty Array;
			Global.CheckpointExtraTime = 45;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-0.074, 0.600, 14.412));
			Modify Global Variable(Checkpoints, Append To Array, Vector(70.723, 7.200, -21.737));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-0.289, 1.100, -30.094));
		Else If(Current Map == Map(Paris));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-95, 12.880, -82.150));
			disabled Modify Global Variable(Checkpoints, Append To Array, Vector(-54.350, 12.030, 13.880));
		Else If(Current Map == Map(Horizon Lunar Colony));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-24.593, 3, -122.328));
		Else If(Current Map == Map(Ilios Well));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-275.663, -3.300, 38.160));
		Else If(Current Map == Map(Ilios Lighthouse));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(290.071, -25.500, -88.850));
		Else If(Current Map == Map(Lijiang Control Center Lunar New Year));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-52.888, 265.600, 339.011));
		Else If(Current Map == Map(New Queen Street));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-74.924, 8.140, -24.618));
		Else If(Current Map == Map(Busan Sanctuary Lunar New Year));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-393.333, 9.600, 159.989));
		Else If(Current Map == Map(Ayutthaya));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(17.973, 1.300, -56.506));
		Else If(Current Map == Map(Suravasa));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(62.540, 5.900, 41.790));
		Else If(Current Map == Map(New Junk City));
			Global.Checkpoints = Empty Array;
			Global.checkpointRadius = 10;
			Modify Global Variable(Checkpoints, Append To Array, Vector(70.980, 2.940, 42.910));
		Else If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Global.CheckpointExtraTime = 45;
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(-11, -0.920, -84.850));
			Modify Global Variable(Checkpoints, Append To Array, Vector(-4, 1, 0.600));
		Else If(Current Map == Map(Runasapi));
			Global.Checkpoints = Empty Array;
			Modify Global Variable(Checkpoints, Append To Array, Vector(83.315, 4.150, 23.265));
		End;
		Abort If(Global.Checkpoints == Null);
		Wait Until(Is Game In Progress, 99999);
		For Global Variable(i, 0, Count Of(Global.Checkpoints), 1);
			Create Effect(All Players(All Teams), Light Shaft, Team Of(Local Player) == Team 1 ? (Global.CheckpointsPassed == Evaluate Once(
				Global.i) ? Color(Red) : Color(Gray)) : (Local Player.CheckpointsPassed == Evaluate Once(Global.i) ? Color(Green) : (
				Local Player.CheckpointsPassed - 1 == Evaluate Once(Global.i) ? Custom Color(0, 100, 200, 0) : Custom Color(0, 0, 0, 0))),
				Global.Checkpoints[Global.i] - Up * 2, Global.checkpointRadius, Visible To and Color);
			Create In-World Text(Team Of(Local Player) == Team 2 ? (Local Player.CheckpointsPassed == Evaluate Once(Global.i)
				? Local Player : Null) : Local Player, Team Of(Local Player) == Team 2 ? Custom String("{2} Checkpoint {0}/{1} {2}",
				Evaluate Once(Global.i) + 1, Evaluate Once(Count Of(Global.Checkpoints)), Icon String(Flag)) : Custom String(
				"{2} Checkpoint {0} {2}\r\n{1}", Evaluate Once(Global.i) + 1, Global.CheckpointsPassed > Evaluate Once(Global.i)
				? Custom String("({0} passed)", Global.CheckpointRunnersPassed[Evaluate Once(Global.i)]) : String(""),
				Global.CheckpointsPassed >= Evaluate Once(Global.i) + 1 ? String("") : Icon String(Stop)),
				Global.Checkpoints[Global.i] + Up * 5, 1.200, Do Not Clip, Visible To String and Color, Team Of(Local Player) == Team 1 ? (
				Global.CheckpointsPassed == Evaluate Once(Global.i) ? Color(Red) : Custom Color(255, 255, 255, 100)) : Color(Green),
				Default Visibility);
			Create In-World Text(Team Of(Local Player) == Team 2 ? (Local Player.CheckpointsPassed - 1 == Evaluate Once(Global.i)
				? Local Player : Null) : Null, Custom String("{0} Safe Zone {0}", Ability Icon String(Hero(Baptiste), Button(Ability 1))),
				Global.Checkpoints[Global.i] + Up * 5, 1.800, Do Not Clip, Visible To, Color(White), Default Visibility);
		End;
	}
}

rule("Runners win the round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundInProgress == True;
		Is True For Any(Filtered Array(Global.currentRunners, Entity Exists(Current Array Element) && Is Alive(Current Array Element)
			&& Has Spawned(Current Array Element) && Current Array Element.PassedAllCheckpoints), Distance Between(Position Of(
			Current Array Element), Global.endPos) < Global.objectiveRadius) == True;
	}

	actions
	{
		Global.roundInProgress = False;
		Set Match Time(Global.roundLength);
		Global.scores[1] += 1;
		Skip If(!Global.HIGHLIGHT_FIRST_RUNNER, 1);
		Call Subroutine(HighlightFirstRunner);
		Big Message(All Players(All Teams), Global.scoreToWin == Global.scores[1] ? Custom String("Runners win the match!")
			: Custom String("Runners win the round!"));
		Skip If(Global.HIGHLIGHT_FIRST_RUNNER, 1);
		Wait(1, Ignore Condition);
		Start Rule(CheckEndOfGame, Restart Rule);
	}
}

rule("New player joins the game")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Disable Messages(Event Player);
		Disable Game Mode In-World UI(Event Player);
		Disable Game Mode HUD(Event Player);
		If(Global.DISABLE_KILLFEED);
			Disable Kill Feed(Event Player);
		End;
	}
}

rule("Check if any team reached the set score")
{
	event
	{
		Subroutine;
		CheckEndOfGame;
	}

	actions
	{
		If(Global.scores[0] >= 3);
			Enable Built-In Game Mode Music;
			Declare Team Victory(Team 1);
			Skip If(Global.SWITCH_SEEKERS == 0, 2);
			Wait(Global.SWITCH_SEEKERS == 2 ? 25 : 4.500, Ignore Condition);
			Call Subroutine(SwitchPlayers);
		Else If(Global.scores[1] >= 3);
			Enable Built-In Game Mode Music;
			Declare Team Victory(Team 2);
			Skip If(Global.SWITCH_SEEKERS == 0, 2);
			Wait(Global.SWITCH_SEEKERS == 2 ? 25 : 4.500, Ignore Condition);
			Call Subroutine(SwitchPlayers);
		Else;
			Start Rule(resetRound, Restart Rule);
		End;
	}
}

rule("Switch Players")
{
	event
	{
		Subroutine;
		SwitchPlayers;
	}

	actions
	{
		Set Slow Motion(10);
		Global.CurrentSeekers = All Players(Team 1);
		Global.Seeker_Priority_List = Array Slice(Randomized Array(Filtered Array(Global.Seeker_Priority_List, Entity Exists(
			Current Array Element))), 0, 2);
		Global.PlayerCount = Number Of Players(All Teams);
		Global.T1PlayerCount = Number Of Players(Team 1);
		If(Entity Exists(Players In Slot(0, Team 1)[0]) && !Array Contains(Global.Seeker_Priority_List, Players In Slot(0, Team 1)[0]));
			Move Player to Team(Players In Slot(0, Team 1), Team 2, -1);
			Global.T1PlayerCount -= 1;
		End;
		If(Entity Exists(Players In Slot(1, Team 1)[0]) && !Array Contains(Global.Seeker_Priority_List, Players In Slot(1, Team 1)[0]));
			Move Player to Team(Players In Slot(1, Team 1), Team 2, -1);
			Global.T1PlayerCount -= 1;
		End;
		Wait(0.016, Ignore Condition);
		Modify Global Variable(Seeker_Priority_List, Remove From Array By Value, All Players(Team 1));
		Global.FilteredSeekers = Filtered Array(All Players(Team 2), Custom String("{0}", Current Array Element) != Custom String(
			"Coldabyss"));
		Global.FilteredSeekers = Filtered Array(Global.FilteredSeekers, Custom String("{0}", Current Array Element) != Custom String(
			"Momo"));
		Global.NextSeekers = Filtered Array(Append To Array(Global.Seeker_Priority_List, Append To Array(Randomized Array(Filtered Array(
			Global.FilteredSeekers, !Array Contains(Global.Seeker_Priority_List, Current Array Element) && !Array Contains(
			Global.CurrentSeekers, Current Array Element))), Global.CurrentSeekers)), Entity Exists(Current Array Element));
		For Global Variable(i, 0, Global.PlayerCount >= 6 ? 2 - Global.T1PlayerCount : 1 - Global.T1PlayerCount, 1);
			Move Player to Team(Global.NextSeekers[Global.i], Team 1, -1);
		End;
		Restart Match;
	}
}

disabled rule("SEEKERS ====================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Effects/Texts (global)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Local Player, Null, Custom String(" "), Null, Top, 1, Null, Null, Null, Visible To, Default Visibility);
		Create HUD Text(Team Of(Local Player) == Team 1 && !Local Player.antiCampSleepStart && Is True For Any(Global.currentRunners,
			Current Array Element.isNearSeeker[Slot Of(Local Player)] == True) ? Local Player : Null, Custom String(
			"{0} There are runners nearby {0}", Icon String(Warning)), Null, Null, Top, 2, Color(Yellow), Null, Null, Visible To,
			Default Visibility);
		Create HUD Text(Local Player.antiCampSleepStart ? Local Player : Null, Custom String("{0} You have been slept {0}",
			Ability Icon String(Hero(Ana), Button(Ability 1))), Null, Null, Top, 3, Color(Yellow), Color(Yellow), Color(White), Visible To,
			Default Visibility);
		Create HUD Text(Local Player.antiCampSleepStart ? Local Player : Null, Null, Custom String(
			"Don't stay near invisible Runners for too long to avoid receiving damage and getting slept"), Null, Top, 4, Color(White),
			Color(Yellow), Color(White), Visible To, Default Visibility);
		If(Global.Checkpoints != Null);
			Create HUD Text(All Players(Team 1), Null, Custom String("Runners who passed all checkpoints:"), Null, Right, 10, Color(White),
				Color(White), Color(White), Visible To, Default Visibility);
		End;
		Create HUD Text(All Players(Team 1), Null, Custom String("{2} Hold {0} to respawn ({1}) {2}", Custom String("[{0}] + [{1}]",
			Input Binding String(Button(Crouch)), Input Binding String(Button(Melee))), Max(0, Round To Integer(
			Local Player.RespawnCooldown - Global.TotalTimeElapsed, Up)), Icon String(Recycle)), Null, Right, -10, Color(Sky Blue), Color(
			Aqua), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.SecCamAlertOwner, Custom String("{0} SECURITY CAM: MOVEMENT DETECTED {0}", Ability Icon String(Hero(
			Lúcio), Button(Secondary Fire))), Null, Null, Top, 10, Custom Color(255, 50, 50, 255), Color(White), Color(White), Visible To,
			Default Visibility);
		Create HUD Text(All Players(Team 1), String("{0} {1}", Ability Icon String(Hero(Lúcio), Button(Secondary Fire)), Custom String(
			"Security Cam: {0}", Local Player.SecCamPos ? Custom String("{0} Active", Icon String(Checkmark)) : Custom String(
			"{0} Inactive", Icon String(No)))), Null, Null, Left, 1, Local Player.SecCamPos ? Color(Green) : Custom Color(125, 98, 255,
			255), Color(White), Color(White), Visible To String and Color, Default Visibility);
		Create HUD Text(All Players(Team 1), Custom String(""), Custom String("Press [{0}] to place or hold [{1}] to view live feed",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload))), Null, Left, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(Team 1), Null, Custom String("» Auto Tracking Mode: {0} {1}                  \n	{2}",
			Local Player.SecCamTrackingDisabled ? Custom String("{0} Disabled", Icon String(X)) : Custom String("{0} Enabled", Icon String(
			Checkmark)), Local Player.isUsingCamera ? Custom String("(Press [{0}] to toggle)\r", Input Binding String(Button(Melee)))
			: String(""), Local Player.isUsingCamera ? Custom String("» Manual Control: Hold {0} | {1} to move the camera", Custom String(
			"[{0}] | [{1}]", Input Binding String(Button(Crouch)), Input Binding String(Button(Jump))), Custom String("[{0}] | [{1}]",
			Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)))) : String("")), Null, Left, 2, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Effects/Texts (personal)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Wait(1, Abort When False);
		Wait Until(Has Spawned(Event Player), 99999);
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Beacon Sound, Color(White), Eye Position(Event Player), 200,
			Visible To Position and Radius);
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Bad Aura, Color(Red), Event Player, 1,
			Visible To Position and Radius);
		Create Icon(Filtered Array(All Players(Team 2), Current Array Element.isNearSeeker[Slot Of(Event Player)] == True), Event Player,
			Skull, Visible To and Position, Color(Red), True);
		Create Beam Effect(Is Alive(Event Player) && Event Player.canSee ? All Players(All Teams) : Null, Bad Beam, Update Every Frame(
			Eye Position(Event Player) + Vector(0, Event Player == Local Player ? -0.500 : 0, 0)), Update Every Frame(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100,
			All Living Players(Opposite Team Of(Team Of(Event Player))), Filtered Array(All Players(All Teams),
			!Current Array Element.canBeSeen), False)), Event Player.SeekerBeamColor != Null ? Event Player.SeekerBeamColor : Color(Red),
			Visible To Position Radius and Color);
		Create In-World Text(Event Player.antiCampSleepStart ? All Players(All Teams) : Null, Custom String("{0} {1} {0} ",
			Ability Icon String(Hero(Ana), Button(Ability 1)), Max(0, Round To Integer(Global.AntiCampSleepDuration - (
			Global.TotalTimeElapsed - Event Player.antiCampSleepStart), Up))), Event Player, 1.800, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(Event Player.SecCamPos ? (Event Player.isUsingCamera ? Remove From Array(Event Player.SecCamLight_VisibleTo,
			Event Player) : Event Player.SecCamLight_VisibleTo) : Null, Good Aura, Color(Red), Event Player.SecCamPos, 0.400,
			Visible To Position and Radius);
		Create Effect(Event Player.isUsingCamera ? Event Player : Null, Sphere, Custom Color(180, 180, 180, 10), Event Player.SecCamPos,
			0.400, Visible To Position and Radius);
		Create In-World Text(Event Player.SecCamPos != Null ? All Players(Team 1) : Null, Custom String("{1} {0}'s Cam", Event Player,
			Ability Icon String(Hero(Lúcio), Button(Secondary Fire))), Event Player.SecCamPos + Vector(0, 0.500, 0), 0.800, Do Not Clip,
			Visible To Position String and Color, Event Player.SecCamAlertOwner ? Custom Color(255, 50, 50, 255) : Color(Sky Blue),
			Default Visibility);
		Create Effect(Event Player.SecCamPos != Null ? (Event Player.isUsingCamera ? Remove From Array(All Players(All Teams),
			Event Player) : All Players(All Teams)) : Null, Good Aura, Event Player.isUsingCamera ? Color(Orange) : Color(Sky Blue),
			Event Player.SecCamPos, 0.200, Visible To Position Radius and Color);
		Create Effect(Event Player.SecCamPos && Is Button Held(Event Player, Button(Interact)) ? Event Player : Null, Sphere, Color(Green),
			Event Player.SecCamPos, Global.SECURITY_CAM_DETECT_RADIUS, Visible To Position and Radius);
		Create Effect(Event Player.isUsingCamera ? All Players(All Teams) : Null, Decal Sound, Color(White), Event Player.SecCamPos, 120,
			Visible To Position and Radius);
		Create In-World Text(Event Player.SecCamPos != Null ? Filtered Array(All Living Players(Team 2), Is In Line of Sight(Eye Position(
			Current Array Element), Event Player.SecCamPos, Barriers Do Not Block LOS)) : Null, Custom String("{1} {0}'s Cam",
			Event Player, Ability Icon String(Hero(Lúcio), Button(Secondary Fire))), Event Player.SecCamPos + Vector(0, 0.500, 0), 0.800,
			Do Not Clip, Visible To Position and String, Custom Color(255, 85, 50, 255), Default Visibility);
	}
}

rule("Initialize Seekers")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Wait(1, Abort When False);
		If(Global.DISABLE_SCOREBOARD == 1);
			Disable Scoreboard(Event Player);
		Else;
			Enable Scoreboard(Event Player);
		End;
		If(Global.DISABLE_TEXTCHAT == 1);
			Disable Text Chat(Event Player);
		Else;
			Enable Text Chat(Event Player);
		End;
		If(Global.DISABLE_NAMEPLATES == 1);
			Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Else;
			Enable Nameplates(All Players(All Teams), All Players(All Teams));
		End;
		If(Global.DISABLE_VOICECHAT == 1);
			Disable Voice Chat(Event Player, True, True, False);
		Else;
			Enable Voice Chat(Event Player);
		End;
		Wait Until(Has Spawned(Event Player), 99999);
		Set Max Health(Event Player, 0.100);
		Add Health Pool To Player(Event Player, Health, 500, True, False);
		Global.AntiCampSleepDuration = Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)))
			== 1 ? Global.ANTI_CAMP_SLEEP_DURATION * 0.600 : Global.ANTI_CAMP_SLEEP_DURATION;
		"2 Runners per 1 seeker until seeker team fills up"
		disabled If(Number Of Players(Team 1) * 1 > Number Of Players(Team 2) && Number Of Players(Team 2) < Number Of Slots(Team 2) && True);
		"2 Runners per 1 seeker until seeker team fills up"
		If(Number Of Players(Team 1) * 1 > Number Of Players(Team 2) && Number Of Players(Team 2) < Number Of Slots(Team 2)
			&& Number Of Players(Team 1) > 1 && True);
			Move Player to Team(Event Player, Team 2, -1);
		End;
		disabled Wait Until(Has Spawned(Event Player), 99999);
		Set Move Speed(Event Player, 150);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Set Status(Event Player, Null, Unkillable, 9999);
		Event Player.ThirdPersonCamEnabled = False;
		Stop Camera(Event Player);
		disabled Start Heal Over Time(Event Player, Null, 9999, 1);
		Set Primary Fire Enabled(Event Player, False);
		Global.currentRunners = Remove From Array(Global.currentRunners, Event Player);
		Event Player.canSee = True;
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("  Keep an eye out for runners"));
		Wait(2, Ignore Condition);
		Small Message(Event Player, Custom String("  Don't let them reach the red objective"));
	}
}

rule("Remove AFK Seekers from the game")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(!Has Spawned(Event Player) || Is In Spawn Room(Event Player)) == True;
		Custom String("Coldabyss") != Custom String("{0}", Event Player);
	}

	actions
	{
		Wait(30, Abort When False);
		Big Message(Event Player, Custom String("You will be removed from the game if you remain inactive"));
		Wait(15, Abort When False);
		Big Message(Event Player, Custom String("You will be removed from the game if you remain inactive"));
		Wait(15, Abort When False);
		Small Message(All Players(All Teams), Custom String("Seeker removed from the game due to inactivity"));
		If(Event Player != Host Player);
			Remove Player(Event Player);
		Else;
			Move Player to Team(Event Player, Team 2, -1);
		End;
	}
}

rule("Seekers burn Runners that are moving")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.canSee == True;
		Ray Cast Hit Player(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
			+ Update Every Frame(Facing Direction Of(Event Player)) * 100, All Living Players(Team 2), Null, False) != Null;
	}

	actions
	{
		Event Player.targetPlayer = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 100, All Living Players(Team 2), Null, False);
		While(Event Player.targetPlayer && Event Player.targetPlayer.canBeSeen && !Event Player.targetPlayer.isProtected);
			Event Player.targetPlayer.seen = True;
			Event Player.targetPlayer.Attacker = Event Player;
			If(!Has Status(Event Player.targetPlayer, Burning));
				Set Status(Event Player.targetPlayer, Event Player, Burning, 9999);
			End;
			Damage(Event Player.targetPlayer, Event Player, 5);
			Wait(0.032, Abort When False);
			Event Player.targetPlayer = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
				Event Player) * 100, All Living Players(Team 2), Null, False);
		End;
	}
}

rule("Damage over time spotted Runners")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.seen == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Damage(Event Player, Event Player.Attacker, 8 + (80 / Distance Between(
			Event Player.PassedAllCheckpoints ? Global.endPos : Global.Checkpoints[Event Player.CheckpointsPassed], Position Of(
			Event Player))) ^ (Event Player.PassedAllCheckpoints ? 4 : 3.500));
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Seeker left the game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) == 2;
	}

	actions
	{
		Wait Until(Number Of Players(Team 1) <= 1, 99999);
		Small Message(All Players(Team 2), Custom String("{0} Seeker left the game: Hold [{1}] to switch teams {0}", Icon String(Warning),
			Input Binding String(Button(Reload))));
		Global.AntiCampSleepDuration = Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)))
			== 1 ? Global.ANTI_CAMP_SLEEP_DURATION * 0.600 : Global.ANTI_CAMP_SLEEP_DURATION;
	}
}

rule("No Seekers at game start: Switch random players")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Waiting For Players == True;
		Number Of Players(Team 1) == 0;
		Number Of Players(Team 2) >= 2;
	}

	actions
	{
		Wait(1, Abort When False);
		Move Player to Team(Random Value In Array(All Players(Team 2)), Team 1, -1);
		Wait(0.250, Ignore Condition);
		If(Number Of Players(Team 2) >= 7 && Number Of Players(Team 1) <= 1);
			Move Player to Team(Random Value In Array(All Players(Team 2)), Team 1, -1);
		End;
	}
}

rule("Seeker crowd controlled")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(Has Status(Event Player, Asleep) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Stunned) || Has Status(
			Event Player, Frozen) || Is Dead(Event Player) || False) == True;
	}

	actions
	{
		Event Player.isCrowdControlled = True;
		Event Player.canSee = False;
		Wait(0.250, Restart When True);
		Loop If Condition Is True;
		Event Player.canSee = True;
		Event Player.isCrowdControlled = False;
	}
}

rule("Seeker Respawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.RespawnCooldown <= Total Time Elapsed;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("  {0} Keep holding to respawn..", Icon String(Recycle)));
		Wait(1.250, Abort When False);
		Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
		Set Player Allowed Heroes(Event Player, All Heroes);
		Big Message(All Players(All Teams), Custom String("Seeker {1} is going back to spawn", Null, Event Player));
		Wait Until(Is In Spawn Room(Event Player), 99999);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 150);
		Event Player.RespawnCooldown = Global.SEEKER_RESPAWN_COOLDOWN + Total Time Elapsed;
	}
}

rule("Add/remove player from Seeker Priority List")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.SWITCH_SEEKERS >= 1;
		Is Game In Progress == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		If(Array Contains(Global.Seeker_Priority_List, Event Player));
			Small Message(Event Player, Custom String("You have been removed from the Seekers queue"));
			Modify Global Variable(Seeker_Priority_List, Remove From Array By Value, Event Player);
		Else;
			Small Message(Event Player, Custom String("You have been added to the Seekers queue"));
			Modify Global Variable(Seeker_Priority_List, Append To Array, Event Player);
		End;
	}
}

rule("Create HUD Text for Seeker Priority List")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SWITCH_SEEKERS >= 1;
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String("{2} Hold [{0}]+[{1}] if you want to be a Seeker next game {2}",
			Input Binding String(Button(Interact)), Input Binding String(Button(Melee)), Icon String(Arrow: Down)), Null, Right, -10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Global.Seeker_Priority_List, Null, Null, Custom String("                                {0} IN QUEUE", Icon String(
			Checkmark)), Right, -9, Color(Green), Color(White), Color(Green), Visible To and String, Default Visibility);
		disabled Create HUD Text(Remove From Array(All Players(All Teams), Global.Seeker_Priority_List), Null, Null, Custom String(
			"                                 {0} NOT IN QUEUE", Icon String(No)), Right, -9, Color(Red), Color(White), Color(Red),
			Visible To and String, Default Visibility);
		Create HUD Text(Global.Seeker_Priority_List, Null, Custom String("{0} In Seeker priority queue", Icon String(Checkmark)), Null,
			Right, -9, Color(Green), Color(Green), Color(Green), Visible To and String, Default Visibility);
		Create HUD Text(Remove From Array(All Players(All Teams), Global.Seeker_Priority_List), Null, Custom String(
			"{0} Not in Seeker priority queue", Icon String(No)), Null, Right, -9, Color(Red), Color(Red), Color(Red),
			Visible To and String, Default Visibility);
	}
}

rule("Anti-Camping (Classic): Sleep Seekers that camp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.CLASSIC_ANTI_CAMP == True;
		Has Status(Event Player, Asleep) != True;
		Is True For Any(Filtered Array(All Living Players(Team 2), Has Spawned(Current Array Element)
			&& !Current Array Element.canBeSeen && True), Distance Between(Position Of(Event Player), Position Of(Current Array Element))
			< Global.campingDistance) == True;
	}

	actions
	{
		Wait(7, Abort When False);
		disabled Set Status(Event Player, Null, Asleep, 3);
		Set Status(Event Player, Null, Asleep, Array Contains(All Tank Heroes, Hero Of(Event Player)) ? 4.280 : 3);
		Big Message(Event Player, Custom String("You are slept for 3 seconds!"));
	}
}

rule("Anti-Camping: Seeker 1 near Runner")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.isAlive == True;
		(Has Spawned(Players In Slot(0, Team 1)) && Players In Slot(0, Team 1).canSee && Distance Between(Event Player, Players In Slot(0,
			Team 1)) <= Global.campingDistance && True) == True;
	}

	actions
	{
		Event Player.isNearSeeker[0] = True;
		If(!Event Player.isMoving);
			Event Player.TimeNearSeeker[0] += 0.100;
		End;
		If(Event Player.TimeNearSeeker[0] >= 6 && Players In Slot(0, Team 1).IsCampingRunner == Null);
			Players In Slot(0, Team 1).IsCampingRunner = Event Player;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Event Player.isNearSeeker[0] = False;
		Event Player.TimeNearSeeker[0] = 0;
	}
}

rule("Anti-Camping: Seeker 2 near Runner")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.isAlive == True;
		(Has Spawned(Players In Slot(1, Team 1)) && Players In Slot(1, Team 1).canSee && Distance Between(Event Player, Players In Slot(1,
			Team 1)) <= Global.campingDistance && True) == True;
	}

	actions
	{
		Event Player.isNearSeeker[1] = True;
		If(!Event Player.isMoving);
			Event Player.TimeNearSeeker[1] += 0.100;
		End;
		If(Event Player.TimeNearSeeker[1] >= 6 && Players In Slot(1, Team 1).IsCampingRunner == Null);
			Players In Slot(1, Team 1).IsCampingRunner = Event Player;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Event Player.isNearSeeker[1] = False;
		Event Player.TimeNearSeeker[1] = 0;
	}
}

rule("Anti-Camping: Damage Seekers that camp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.IsCampingRunner != Null;
	}

	actions
	{
		While(Event Player.IsCampingRunner.isNearSeeker[Slot Of(Event Player)] == True && Event Player.IsCampingRunner.isMoving != True);
			Damage(Event Player, Null, 0.080 * 502);
			Wait(0.500, Ignore Condition);
		End;
		Event Player.IsCampingRunner = Null;
	}
}

rule("Anti-Camping: Knock down Seekers that camp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.CLASSIC_ANTI_CAMP != True;
		Event Player.IsCampingRunner != Null;
		Health(Event Player) <= 3;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 20);
		Event Player.antiCampSleepStart = Total Time Elapsed;
		Start Heal Over Time(Event Player, Event Player, 9999, 1 / Global.AntiCampSleepDuration * 505);
		Wait(0.100, Ignore Condition);
		Wait Until(Event Player.canSee || Normalized Health(Event Player) == 1, 20);
		Event Player.antiCampSleepStart = 0;
		Clear Status(Event Player, Knocked Down);
		Wait Until(Normalized Health(Event Player) == 1, 20);
		Stop Heal Over Time(Last Heal Over Time ID);
	}
}

disabled rule("Anti-Camping: Heal Seekers over time")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		While(True);
			Wait Until(Event Player.canSee && !Event Player.isCamping, 99999);
			Heal(Event Player, Null, 30);
			Wait(10, Ignore Condition);
		End;
	}
}

rule("Anti-Camping: Runner is being watched by Seekers")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.ANTI_CAMPING_ENABLED == True;
		Is Alive(Event Player) == True;
		Event Player.canBeSeen == False;
		Event Player.SphereOfProtectionActive != True;
		Event Player.TimeWatchedBySeekers < 8;
		Event Player.isMoving != True;
		Event Player.inFovOfSeeker == True;
	}

	actions
	{
		Event Player.IsBeingWatchedBySeekers = True;
		disabled Event Player.SphereOfProtectionProgressBar += 4;
		Event Player.TimeWatchedBySeekers += Event Player.isInSafeZone ? 0.400 : 0.200;
		Wait(0.175, Ignore Condition);
		Loop If Condition Is True;
		Event Player.IsBeingWatchedBySeekers = False;
	}
}

rule("Anti-Camping: Runner is not being watched by Seekers")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.ANTI_CAMPING_ENABLED == True;
		Event Player.IsBeingWatchedBySeekers != True;
		Event Player.SphereOfProtectionReady != True;
		Event Player.TimeWatchedBySeekers > 0;
	}

	actions
	{
		Wait(0.225, Abort When False);
		Event Player.TimeWatchedBySeekers -= 0.100;
		Loop If Condition Is True;
	}
}

rule("Anti-Camping: Sphere of Protection ready")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.ANTI_CAMPING_ENABLED == True;
		Event Player.TimeWatchedBySeekers >= 8;
		Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(
			X Component Of(Global.endPos), 0, Z Component Of(Global.endPos))) > Global.noUltimateRadius;
	}

	actions
	{
		Event Player.SphereOfProtectionReady = 5;
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 99999);
		Small Message(Event Player, Custom String("Sphere of Protection is ready"));
		While(Event Player.SphereOfProtectionReady > 0);
			Event Player.SphereOfProtectionReady -= 1;
			Wait(1, Ignore Condition);
		End;
		Event Player.SphereOfProtectionReady = False;
		Event Player.TimeWatchedBySeekers = 0;
	}
}

rule("Anti-Camping: Activate Sphere of Protection")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.ANTI_CAMPING_ENABLED == True;
		Event Player.SphereOfProtectionReady == True;
		Is Alive(Event Player) == True;
		Event Player.SphereOfProtectionActive != True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		If(Event Player.PassedAllCheckpoints && Distance Between(Position Of(Event Player), Global.endPos) <= Global.noUltimateRadius);
			Small Message(Event Player, Custom String("Sphere of Protection not available. You are too close to the goal."));
			Wait(0.500, Ignore Condition);
			Abort;
		End;
		Event Player.isProtected = True;
		Event Player.TimeWatchedBySeekers = 0;
		Event Player.SphereOfProtectionActive = True;
		Event Player.SphereOfProtectionReady = False;
		Event Player.ProtectedDuration = Global.PROTECTION_DURATION + Total Time Elapsed;
		Wait(0.016, Ignore Condition);
		Add Health Pool To Player(Event Player, Shields, 250, False, False);
		If(Workshop Setting Toggle(Custom String("Anti-Camping"), Custom String(
			"Disable abilities of Runner while Sphere of Protection is active"), True, 3));
			If(Is In Air(Event Player));
				Set Status(Event Player, Null, Stunned, 0.100);
			End;
			Set Status(Event Player, Null, Hacked, Global.PROTECTION_DURATION);
		End;
		Create Effect(All Players(All Teams), Sphere, Custom Color(0, 0, 255, 100), Event Player, 2, Visible To Position and Radius);
		Event Player.EntitiesArray[0] = Last Created Entity;
		Wait(0.016, Ignore Condition);
		Create Effect(Event Player, Good Aura Sound, Color(White), Event Player, 80, Visible To Position and Radius);
		Event Player.EntitiesArray[1] = Last Created Entity;
		Wait Until(Event Player.ProtectedDuration <= Total Time Elapsed, 99999);
		Event Player.ProtectedDuration = 0;
		Destroy Effect(Event Player.EntitiesArray[0]);
		Destroy Effect(Event Player.EntitiesArray[1]);
		Wait(0.250, Ignore Condition);
		Event Player.SphereOfProtectionActive = False;
		Event Player.isProtected = False;
		Remove Health Pool From Player(Last Created Health Pool);
	}
}

disabled rule("Anti-Camping: Damage Seekers that camp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.CLASSIC_ANTI_CAMP != True;
		Event Player.canSee == True;
		Is True For Any(Filtered Array(All Living Players(Team 2), Has Spawned(Current Array Element)
			&& !Current Array Element.canBeSeen && True), Distance Between(Position Of(Event Player), Position Of(Current Array Element))
			< Global.campingDistance) == True;
	}

	actions
	{
		Skip If(Event Player.isCamping, 2);
		Wait(5, Abort When False);
		Event Player.isCamping = True;
		Damage(Event Player, Null, 0.080 * 502);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Event Player.isCamping = False;
	}
}

rule("Security Cam (Seeker 1) : Detect Runners")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.isAlive == True;
		Event Player.isMoving == True;
		(Players In Slot(0, Team 1).SecCamPos != Null && Is In Line of Sight(Players In Slot(0, Team 1).SecCamPos, Position Of(
			Event Player), Barriers Do Not Block LOS) && Distance Between(Players In Slot(0, Team 1).SecCamPos, Position Of(Event Player))
			<= Global.SECURITY_CAM_DETECT_RADIUS) == True;
	}

	actions
	{
		If(!Array Contains(Players In Slot(0, Team 1).SecCamRunnersDetected, Event Player));
			Modify Player Variable(Players In Slot(0, Team 1), SecCamRunnersDetected, Append To Array, Event Player);
		End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Modify Player Variable(Players In Slot(0, Team 1), SecCamRunnersDetected, Remove From Array By Value, Event Player);
	}
}

rule("Security Cam (Seeker 2): Detect Runners")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.isAlive == True;
		Event Player.isMoving == True;
		(Players In Slot(1, Team 1).SecCamPos != Null && Is In Line of Sight(Players In Slot(1, Team 1).SecCamPos, Position Of(
			Event Player), Barriers Do Not Block LOS) && Distance Between(Players In Slot(1, Team 1).SecCamPos, Position Of(Event Player))
			<= Global.SECURITY_CAM_DETECT_RADIUS) == True;
	}

	actions
	{
		If(!Array Contains(Players In Slot(1, Team 1).SecCamRunnersDetected, Event Player));
			Modify Player Variable(Players In Slot(1, Team 1), SecCamRunnersDetected, Append To Array, Event Player);
		End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Modify Player Variable(Players In Slot(1, Team 1), SecCamRunnersDetected, Remove From Array By Value, Event Player);
	}
}

rule("Security Cam: Set camera position")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.ENABLE_SECURITY_CAM == True;
		Is Game In Progress == True;
		Is In Spawn Room(Event Player) != True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Event Player.SecCamPos = Null;
		Event Player.SecCamPreviewPos = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Global.SECURITY_CAM_DETECT_RADIUS, All Players(All Teams), Event Player, True);
		If(Y Component Of(Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* Global.SECURITY_CAM_DETECT_RADIUS, All Players(All Teams), Event Player, True)) > 0.200);
			Small Message(Event Player, Custom String("{0} Security Cam cannot be placed on the ground", Icon String(Warning)));
			Wait(0.250, Ignore Condition);
			Abort;
		End;
		If(Event Player.SecCamPreviewPos != Eye Position(Event Player) + Facing Direction Of(Event Player)
			* Global.SECURITY_CAM_DETECT_RADIUS);
			Event Player.SecCamPos = Event Player.SecCamPreviewPos + Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * Global.SECURITY_CAM_DETECT_RADIUS, All Players(All Teams), Event Player, True) * 0.500;
			Event Player.SecCamLookAtPosInit = Position Of(Event Player);
			Event Player.SecCamLookAtAngleInit = Horizontal Angle From Direction(Direction Towards(Event Player.SecCamPos,
				Event Player.SecCamLookAtPosInit));
			Event Player.SecCamLookAtHAngle = Event Player.SecCamLookAtAngleInit;
			Event Player.SecCamLookAtVAngle = Vertical Angle From Direction(Direction Towards(Event Player.SecCamPos,
				Event Player.SecCamLookAtPosInit));
			Wait(0.250, Ignore Condition);
		End;
	}
}

rule("Security Cam: Start camera")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.SecCamPos != Null;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Event Player.isUsingCamera = True;
		Event Player.SecCamLookAtPos = Event Player.SecCamLookAtPosInit;
		Disable Hero HUD(Event Player);
		Wait(0.016, Ignore Condition);
		Start Camera(Event Player, Event Player.SecCamPos, Event Player.SecCamLookAtPos, 5);
		Set Status(Event Player, Null, Rooted, 9999);
		Start Facing(Event Player, Facing Direction Of(Event Player), 100, To World, None);
	}
}

rule("Security Cam: Stop camera")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Button(Reload)) == False;
	}

	actions
	{
		Event Player.isUsingCamera = False;
		Enable Hero HUD(Event Player);
		Stop Camera(Event Player);
		Wait(0.500, Abort When False);
		Wait Until(!Has Status(Event Player, Asleep), 10);
		Stop Facing(Event Player);
		Clear Status(Event Player, Rooted);
		Stop Camera(Event Player);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("Security Cam: Alarm")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.SecCamPos != Null;
		Is True For Any(Event Player.SecCamRunnersDetected, Entity Exists(Current Array Element) && Horizontal Speed Of(
			Current Array Element) >= 3.500) == True;
	}

	actions
	{
		Event Player.SecCamAlertOwner = Event Player;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.SecCamPos, 0.600);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), Event Player.SecCamPos, 50);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Event Player.SecCamAlertOwner = Null;
	}
}

rule("Security Cam: Blink")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.SecCamPos != Null;
		Event Player.SecCamAlertOwner == Null;
	}

	actions
	{
		Event Player.SecCamLight_VisibleTo = All Players(All Teams);
		Wait(0.500, Ignore Condition);
		Event Player.SecCamLight_VisibleTo = Null;
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Security Cam: Move up")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.isUsingCamera == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Crouch)) != True;
		(Event Player.SecCamTrackingDisabled || !Is True For Any(Event Player.SecCamRunnersDetected, Entity Exists(Current Array Element)))
			== True;
	}

	actions
	{
		Event Player.SecCamLookAtVAngle = Max(-89, Event Player.SecCamLookAtVAngle - 8);
		Event Player.SecCamLookAtPos = Event Player.SecCamPos + Direction From Angles(Event Player.SecCamLookAtHAngle,
			Event Player.SecCamLookAtVAngle) * 10;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
		Event Player.SecCamLookAtPosInit = Event Player.SecCamLookAtPos;
	}
}

rule("Security Cam: Move down")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.isUsingCamera == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Jump)) != True;
		(Event Player.SecCamTrackingDisabled || !Is True For Any(Event Player.SecCamRunnersDetected, Entity Exists(Current Array Element)))
			== True;
	}

	actions
	{
		disabled Event Player.SecCamLookAtAngleInit = Horizontal Angle From Direction(Direction Towards(Event Player.SecCamPos,
			Event Player.SecCamLookAtPosInit));
		Event Player.SecCamLookAtVAngle = Min(89, Event Player.SecCamLookAtVAngle + 8);
		Event Player.SecCamLookAtPos = Event Player.SecCamPos + Direction From Angles(Event Player.SecCamLookAtHAngle,
			Event Player.SecCamLookAtVAngle) * 10;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
		Event Player.SecCamLookAtPosInit = Event Player.SecCamLookAtPos;
	}
}

rule("Security Cam: Move left")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.isUsingCamera == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) != True;
		(Event Player.SecCamTrackingDisabled || !Is True For Any(Event Player.SecCamRunnersDetected, Entity Exists(Current Array Element)))
			== True;
	}

	actions
	{
		disabled Event Player.SecCamLookAtAngleInit = Horizontal Angle From Direction(Direction Towards(Event Player.SecCamPos,
			Event Player.SecCamLookAtPosInit));
		Event Player.SecCamLookAtHAngle += 8;
		Event Player.SecCamLookAtPos = Event Player.SecCamPos + Direction From Angles(Event Player.SecCamLookAtHAngle,
			Event Player.SecCamLookAtVAngle) * 10;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
		Event Player.SecCamLookAtPosInit = Event Player.SecCamLookAtPos;
	}
}

rule("Security Cam: Move right")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.isUsingCamera == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) != True;
		(Event Player.SecCamTrackingDisabled || !Is True For Any(Event Player.SecCamRunnersDetected, Entity Exists(Current Array Element)))
			== True;
	}

	actions
	{
		Event Player.SecCamLookAtHAngle -= 8;
		Event Player.SecCamLookAtPos = Event Player.SecCamPos + Direction From Angles(Event Player.SecCamLookAtHAngle,
			Event Player.SecCamLookAtVAngle) * 10;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
		Event Player.SecCamLookAtPosInit = Event Player.SecCamLookAtPos;
	}
}

rule("Security Cam: Tracking mode toggle")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.isUsingCamera == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Event Player.SecCamTrackingDisabled = !Event Player.SecCamTrackingDisabled;
		If(Event Player.SecCamTrackingDisabled);
			Small Message(Event Player, Custom String("  {0} Security Cam: Auto Tracking Mode disabled", Ability Icon String(Hero(Lúcio),
				Button(Secondary Fire))));
		Else;
			Small Message(Event Player, Custom String("  {0} Security Cam: Auto Tracking Mode enabled", Ability Icon String(Hero(Lúcio),
				Button(Secondary Fire))));
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("Security Cam: Tracking")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.isUsingCamera == True;
		Event Player.SecCamTrackingDisabled != True;
		Is True For Any(Event Player.SecCamRunnersDetected, Entity Exists(Current Array Element)) == True;
	}

	actions
	{
		Event Player.SecCamLookAtPos = Position Of(First Of(Filtered Array(Event Player.SecCamRunnersDetected, Entity Exists(
			Current Array Element))));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Event Player.SecCamLookAtPos = Event Player.SecCamLookAtPosInit;
	}
}

rule("Seekers: Enable Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Event Player.LastHero;
		Array Contains(Array(Hero(Zarya), Hero(Symmetra), Hero(Torbjörn), Hero(Lifeweaver), Hero(Mei), Hero(Tracer), Hero(Wrecking Ball)),
			Hero Of(Event Player)) != True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Jump Enabled(Event Player, True);
		Set Move Speed(Event Player, 150);
		Event Player.LastHero = Hero Of(Event Player);
	}
}

rule("Seekers:  Disable Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Event Player.LastHero;
		Array Contains(Array(Hero(Zarya), Hero(Symmetra), Hero(Torbjörn), Hero(Lifeweaver), Hero(Mei), Hero(Tracer), Hero(Wrecking Ball)),
			Hero Of(Event Player)) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Jump Enabled(Event Player, True);
		Set Move Speed(Event Player, 150);
		Event Player.LastHero = Hero Of(Event Player);
	}
}

disabled rule("RUNNERS ====================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("EFFECTS/TEXT (GLOBAL)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Living Players(Team 2), Local Player.seen ? Custom String("{0} You are dying! {0}", Icon String(Skull)) : (
			Local Player.isProtected ? Custom String("{0} You are protected! {0}", Ability Icon String(Hero(Zarya), Button(Ability 1))) : (
			Local Player.spotted ? Custom String("{0} You have been spotted {0}", Icon String(Eye)) : (
			Local Player.canBeSeen ? Custom String("{0} You are visible {0}", Icon String(Warning)) : Custom String(
			"{0} You are invisible {0}", Icon String(Checkmark))))), Null, Null, Top, 0, Local Player.seen ? Color(Red) : (
			Local Player.isProtected ? Custom Color(125, 75, 255, 255) : (Local Player.spotted ? Custom Color(255, 100, 0, 255) : (
			Local Player.canBeSeen ? Color(Yellow) : Color(Green)))), Null, Color(White), Visible To String and Color, Default Visibility);
		Skip If(!Global.ANTI_CAMPING_ENABLED, 4);
		Create HUD Text(All Living Players(Team 2), Null, Custom String("Sphere of Protection: Press [{0}] to activate",
			Input Binding String(Button(Interact))), Null, Left, -1, Null, Custom Color(125, 75, 255, 255), Color(White),
			Visible To and String, Default Visibility);
		Create Progress Bar HUD Text(Filtered Array(All Players(Team 2), Local Player.ProtectedDuration != 0), (
			Local Player.ProtectedDuration - Global.TotalTimeElapsed) * 100 / Global.PROTECTION_DURATION,
			Local Player.ProtectedDuration - Global.TotalTimeElapsed, Top, 3, Custom Color(125, 75, 255, 255), Custom Color(125, 75, 255,
			255), Visible To Values and Color, Default Visibility);
		Create HUD Text(All Living Players(Team 2), Custom String("{1} {0}", Local Player.SphereOfProtectionActive ? Custom String(
			"Active") : (Local Player.SphereOfProtectionReady ? Custom String("Ready ({0})", Local Player.SphereOfProtectionReady)
			: Custom String("Not Ready")), Ability Icon String(Hero(Zarya), Button(Ability 1))), Null, Null, Left, 1,
			Local Player.SphereOfProtectionReady ? Custom Color(125, 75, 255, 255) : (Local Player.SphereOfProtectionActive ? Color(Green)
			: Custom Color(200, 200, 200, 255)), Color(White), Color(White), Visible To String and Color, Default Visibility);
		Create HUD Text(All Living Players(Team 2), Null, Custom String("{0} Makes you temporary immune to Seekers' Laser\r", Icon String(
			Arrow: Right)), Null, Left, 2, Null, Color(White), Null, Visible To and String, Default Visibility);
		"Speed penalty"
		Create HUD Text(Team Of(Local Player) == Team 2 && Local Player.MoveSpeedPercent < 100 ? Local Player : Null, Custom String(
			"{0}{1}", Icon String(Poison), Custom String("-{0}% Speed", 100 - Local Player.MoveSpeedPercent)), Null, Null, Right, -5,
			Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Players On Hero(Hero(Tracer), Team 2), Custom String("{0} Recalls left: {1}/{2}", Ability Icon String(Hero(Tracer),
			Button(Ability 2)), Global.TRACER_RECALLS_PER_ROUND - Local Player.TracerRecalls, Global.TRACER_RECALLS_PER_ROUND), Null, Null,
			Right, -3, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Players On Hero(Hero(Tracer), Team 2), Null, Custom String("{0} Teleports you back to Spawn", Icon String(
			Arrow: Right)), Null, Right, -2, Color(Orange), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, -4, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, -6, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create Beam Effect(Team Of(Local Player) == Team 2 && Hero Of(Local Player) == Hero(Baptiste) && Is Button Held(Local Player,
			Button(Secondary Fire)) ? Local Player : 0, Bad Beam, Update Every Frame(Eye Position(Local Player)) + Vector(0, -0.200, 0),
			Ray Cast Hit Position(Update Every Frame(Eye Position(Local Player)), Update Every Frame(Eye Position(Local Player))
			+ Facing Direction Of(Local Player) * 30, All Players(All Teams), Local Player, True), Custom Color(0, 100, 200, 255),
			Visible To Position and Radius);
		Create HUD Text(Players On Hero(Hero(Baptiste), Team 2), Custom String("{0} Safe Zones left: {1}/{2}", Ability Icon String(Hero(
			Baptiste), Button(Ability 1)), Global.MOBILE_SAFE_ZONES_PER_ROUND - Local Player.MobileSafeZoneCount,
			Global.MOBILE_SAFE_ZONES_PER_ROUND), Null, Null, Right, -3, Color(Sky Blue), Color(Sky Blue), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Players On Hero(Hero(Baptiste), Team 2), Null, Custom String("{0} Press [{1}] to create a safe zone", Icon String(
			Arrow: Right), Input Binding String(Button(Ability 2)), Input Binding String(Button(Secondary Fire))), Null, Right, -2,
			Custom Color(0, 100, 200, 255), Color(Sky Blue), Color(White), Visible To and String, Default Visibility);
		If(Global.SPOTTED_STATUS_BEHAVIOUR >= 1);
			Create Progress Bar HUD Text(Local Player.showSpottedStatusProgressBar ? Local Player : Null, (
				Local Player.spottedTimerStart + Global.SPOTTED_DURATION + 0.100 - Global.TotalTimeElapsed) * 100 / Global.SPOTTED_DURATION,
				Null, Top, 0, Custom Color(255, 100, 0, 200), Color(White), Visible To Values and Color, Default Visibility);
		Else;
			Create Progress Bar HUD Text(
				Local Player.isAlive && Local Player.spottedTimerStart && Local Player.spottedDuration >= 0.500 ? Local Player : Null, (
				Local Player.spottedTimerStart + Local Player.spottedDuration + 0.100 - Global.TotalTimeElapsed)
				* 100 / Local Player.spottedDuration, Null, Top, 0, Custom Color(255, 100, 0, 200), Color(White), Visible To Values and Color,
				Default Visibility);
		End;
		Create Progress Bar HUD Text(Hero Of(Local Player) == Hero(Lúcio) && Local Player.LucioWallrideStamina > 0 ? Local Player : Null,
			100 - Local Player.LucioWallrideStamina, Custom String("Wallride Stamina"), Right, 0, Local Player.LucioWallrideStamina > (
			Team Of(Local Player) == Team 1 ? 90 : 75) ? Color(Red) : Color(Green), Color(White), Visible To Values and Color,
			Default Visibility);
		Create Progress Bar HUD Text(Hero Of(Local Player) == Hero(Soldier: 76)
			&& Local Player.SoldierSprintStamina > 0 ? Local Player : Null, 100 - Local Player.SoldierSprintStamina, Custom String(
			"Sprint Stamina"), Right, 0, Color(Green), Color(White), Visible To and Values, Default Visibility);
		Create Progress Bar HUD Text(Filtered Array(All Players(Team 2), Local Player.AbilityCountdown != 0), (
			Local Player.AbilityCountdown - Global.TotalTimeElapsed) * 100 / 8, Local Player.AbilityCountdown - Global.TotalTimeElapsed,
			Top, 3, Custom Color(125, 75, 255, 255), Custom Color(125, 75, 255, 255), Visible To Values and Color, Default Visibility);
	}
}

rule("EFFECT/TEXT (PERSONAL)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Wait(1, Abort When False);
		Wait Until(Has Spawned(Event Player), 99999);
		Create In-World Text(Has Spawned(Event Player) && Is Dead(Event Player) ? Players On Hero(Hero(Mercy), Team 2) : Null,
			Custom String(" ({2}) {0} {1}", Hero Icon String(Hero Of(Event Player)), Event Player, Ability Icon String(Hero(Mercy), Button(
			Ability 2))), Position Of(Event Player) + Vector(0, 1.500, 0), 1, Do Not Clip, Visible To Position and String, Color(Gray),
			Default Visibility);
		Skip If(Global.DISABLE_NAMEPLATES >= 1, 1);
		Create In-World Text(Is Alive(Event Player) ? All Players(Team 2) : Null, Custom String("{0}", Event Player), Event Player, 1,
			Do Not Clip, Visible To Position and String, Color(Blue), Default Visibility);
		Create In-World Text(Is Alive(Event Player) && !Event Player.canBeSeen ? All Living Players(Team 2) : Null, Custom String("{0}",
			Hero Icon String(Hero Of(Event Player))), Position Of(Event Player) + Vector(0, 0, 0), 2, Do Not Clip,
			Visible To Position and String, Color(Blue), Default Visibility);
		Create In-World Text(Is Alive(Event Player) && !Event Player.canBeSeen ? (
			Global.REVEAL_RUNNER_POSITIONS || Event Player.ThirdPersonCamEnabled ? All Living Players(Team 1) : Null) : Null,
			Custom String("{0}", Hero Icon String(Hero Of(Event Player))), Position Of(Event Player) + Vector(0, 0, 0), 2,
			Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		If(Global.Checkpoints != Null);
			Create HUD Text(Event Player.PassedAllCheckpoints ? All Players(Team 1) : Null, Null, Custom String("{0} {1} ({2})",
				Hero Icon String(Hero Of(Event Player)), Event Player, Is Alive(Event Player) ? Custom String("Alive") : Custom String(
				"Dead")), Null, Right, 11, Color(White), Is Alive(Event Player) ? Color(Green) : Color(Gray), Null,
				Visible To String and Color, Default Visibility);
		End;
	}
}

rule("INITIALIZE RUNNERS")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Event Player.seen = False;
		Event Player.seen = False;
		Event Player.OrisaMount1 = Null;
		Event Player.OrisaMount2 = Null;
		Event Player.OrisaMount3 = Null;
		Event Player.canBeSeen = True;
		Event Player.AbilityVar1 = Null;
		Event Player.MoveSpeedPercent = 100;
		Event Player.DeathCount = 0;
		Detach Players(Event Player);
		If(Hero Of(Event Player) != Hero(Wrecking Ball));
			Stop Scaling Player(Event Player);
			Set Move Speed(Event Player, 100);
		End;
		Stop All Damage Over Time(Event Player);
		Wait(0.016, Ignore Condition);
		Clear Status(Event Player, Burning);
		Stop Modifying Hero Voice Lines(Event Player);
		Clear Status(Event Player, Unkillable);
		Stop Heal Over Time(Last Heal Over Time ID);
		Wait Until(!Is In Spawn Room(Event Player), 99999);
		"Add player to currentRunners array if they are not in it yet"
		If(!Array Contains(Global.currentRunners, Event Player));
			Modify Global Variable(currentRunners, Append To Array, Event Player);
		End;
	}
}

rule("RUNNER DIES")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		Event Player.seen = False;
		Event Player.canBeSeen = True;
		Stop All Damage Over Time(Event Player);
		If(Team Of(Attacker) == Opposite Team Of(Team Of(Event Player)));
			Set Status(Event Player, Attacker, Burning, 5);
		End;
		If(Event Player.ThirdPersonCamEnabled);
			Stop Camera(Event Player);
		End;
	}
}

rule("Runner is alive")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Array Contains(Global.currentRunners, Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.seen != True;
	}

	actions
	{
		Event Player.isAlive = True;
		If(Event Player.ThirdPersonCamEnabled);
			Event Player.ThirdPersonCamEnabled = False;
			Wait(0.032, Ignore Condition);
			Event Player.ThirdPersonCamEnabled = True;
		End;
	}
}

rule("Runner is not alive")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(!Array Contains(Global.currentRunners, Event Player) || Is Dead(Event Player) || Event Player.seen) == True;
	}

	actions
	{
		Event Player.isAlive = False;
	}
}

rule("Runner in FOV of Seeker")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.isAlive == True;
		Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)
			&& Current Array Element.canSee && Is In View Angle(Current Array Element, Position Of(Event Player), 35)),
			Is In Line of Sight(Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS) && True)
			== True;
	}

	actions
	{
		Event Player.inFovOfSeeker = True;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Event Player.inFovOfSeeker = False;
	}
}

rule("Runner moving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Update Every Frame(Horizontal Speed Of(Event Player)) >= 0.100;
	}

	actions
	{
		Event Player.isMoving = True;
	}
}

rule("Runner not moving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Update Every Frame(Horizontal Speed Of(Event Player)) < 0.100;
	}

	actions
	{
		Event Player.isMoving = False;
	}
}

rule("Runner visible if moving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.isMoving == True;
		disabled Event Player.canBeSeen == False;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Event Player.canBeSeen = True;
		disabled Clear Status(Event Player, Phased Out);
		Event Player.spottedTimerStart = 0;
		While(Has Status(Event Player, Phased Out));
			Clear Status(Event Player, Phased Out);
			Wait(0.032, Abort When False);
		End;
		If(Hero Of(Event Player) == Hero(Sombra));
			Damage(Event Player, Null, 0.010);
		End;
	}
}

rule("Runner invisible if not moving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundInProgress == True;
		Event Player.seen != True;
		Event Player.isMoving != True;
		disabled Event Player.canBeSeen == True;
	}

	actions
	{
		While(Event Player.spotted);
			Wait(0.032, Abort When False);
			"Wait to turn player invis if they are visible to a seeker"
			disabled If(Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)
				&& Current Array Element.canSee && Is In View Angle(Current Array Element, Position Of(Event Player), 35)),
				Is In Line of Sight(Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS) && True));
		End;
		Event Player.canBeSeen = False;
		Set Invisible(Event Player, Enemies);
		Set Status(Event Player, Null, Phased Out, 9999);
	}
}

rule("Set enabled Heroes for Runners")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Event Player.Available_Heroes = Global.T2_Enabled_Heroes;
	}
}

rule("Match time < 60s: Notify players")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= 61;
	}

	actions
	{
		Wait(1, Abort When False);
		Enable Built-In Game Mode Announcer;
		Big Message(All Players(All Teams), Custom String("60 seconds remaining!"));
		Wait Until(Match Time <= 30, 99999);
		Big Message(All Players(All Teams), Custom String("30 seconds remaining!"));
		Wait Until(Match Time < 28, 99999);
		Enable Built-In Game Mode Music;
		Wait Until(Match Time <= 10, 99999);
		Big Message(All Players(All Teams), Custom String("10 seconds remaining!"));
	}
}

rule("Runner spotted by Seeker (Fixed duration)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.SPOTTED_STATUS_BEHAVIOUR == 1;
		Event Player.seen != True;
		Event Player.isProtected != True;
		Update Every Frame(Horizontal Speed Of(Event Player)) >= 0.100;
		Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)
			&& Current Array Element.canSee && Is In View Angle(Current Array Element, Position Of(Event Player), 35)),
			Is In Line of Sight(Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS) && True)
			== True;
	}

	actions
	{
		Event Player.showSpottedStatusProgressBar = False;
		Event Player.spotted = True;
		Wait(0.032, Ignore Condition);
		Loop If Condition Is True;
		Event Player.showSpottedStatusProgressBar = True;
		Event Player.spottedTimer = Total Time Elapsed + Global.SPOTTED_DURATION;
		While(Event Player.spottedTimer > Total Time Elapsed);
			Wait(0.032, Restart When True);
		End;
		Event Player.spotted = False;
		Event Player.showSpottedStatusProgressBar = False;
	}
}

rule("Runner spotted by Seeker (Fixed duration + clear instantly if Runner is out of sight of Seekers)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.SPOTTED_STATUS_BEHAVIOUR == 2;
		Event Player.seen != True;
		Event Player.isProtected != True;
		Update Every Frame(Horizontal Speed Of(Event Player)) >= 0.100;
		Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)
			&& Current Array Element.canSee && Is In View Angle(Current Array Element, Position Of(Event Player), 35)),
			Is In Line of Sight(Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS) && True)
			== True;
	}

	actions
	{
		Event Player.spotted = True;
		Event Player.showSpottedStatusProgressBar = False;
		Wait(0.032, Ignore Condition);
		Loop If Condition Is True;
		Event Player.spottedTimerStart = Total Time Elapsed;
		Event Player.spottedTimer = Total Time Elapsed + Global.SPOTTED_DURATION;
		While(Event Player.spottedTimer > Total Time Elapsed && Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(
			Current Array Element) && Current Array Element.canSee && Is In View Angle(Current Array Element, Position Of(Event Player),
			35)), Is In Line of Sight(Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS)));
			Event Player.showSpottedStatusProgressBar = True;
			Wait(0.100, Restart When True);
		End;
		Wait(0.100, Restart When True);
		Event Player.spotted = False;
		Event Player.spottedTimerStart = 0;
		Event Player.showSpottedStatusProgressBar = False;
	}
}

rule("Runner spotted by Seeker (Distance based)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.SPOTTED_STATUS_BEHAVIOUR == 0;
		Event Player.isMoving == True;
		Event Player.inFovOfSeeker == True;
		Event Player.isProtected != True;
	}

	actions
	{
		Event Player.spotted = True;
		Wait(0.032, Ignore Condition);
		Loop If Condition Is True;
		Wait(0.016, Restart When True);
		Event Player.spottedTimer = Total Time Elapsed + Event Player.spottedDuration;
		disabled While(Event Player.spottedTimer > Total Time Elapsed && Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(
			Current Array Element) && Current Array Element.canSee && Is In View Angle(Current Array Element, Position Of(Event Player),
			35)), Is In Line of Sight(Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS)));
		disabled Wait(0.100, Restart When True);
		disabled End;
		While(Event Player.spottedTimer > Total Time Elapsed);
			Wait(0.032, Restart When True);
		End;
		Event Player.spotted = False;
		Event Player.spottedTimerStart = 0;
	}
}

rule("Distance based spotted duration: Add last player position to array")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.SPOTTED_STATUS_BEHAVIOUR == 0;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) != True;
		disabled Horizontal Speed Of(Event Player) >= 1;
	}

	actions
	{
		Event Player.lastPosition[Event Player.lastPositionIndex] = Position Of(Event Player);
		Event Player.lastPositionIndex += Event Player.lastPositionIndex == 19 ? -19 : 1;
		Wait(0.096, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Calculate spotted duration from distance traveled")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) != True;
		Event Player.spotted == True;
		(!Event Player.isMoving || !Event Player.inFovOfSeeker) == True;
	}

	actions
	{
		Event Player.travelDistance = Distance Between(Vector(X Component Of(
			Event Player.lastPosition[Event Player.lastPositionIndex == 19 ? 0 : 20 + (Event Player.lastPositionIndex - 19)]), 0,
			Z Component Of(Event Player.lastPosition[Event Player.lastPositionIndex == 19 ? 0 : 20 + (Event Player.lastPositionIndex - 19)
			])), Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))));
		Event Player.spottedDuration = Max(Global.DIST_MIN_SPOTTED_DURATION, Min(Event Player.travelDistance / 15,
			Global.DIST_MAX_SPOTTED_DURATION));
		Event Player.spottedTimerStart = Total Time Elapsed;
	}
}

rule("Runners: Enable Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Event Player.LastHero;
		Array Contains(Array(Hero(Zarya), Hero(Torbjörn), Hero(Tracer), Hero(Symmetra), Hero(Wrecking Ball)), Hero Of(Event Player))
			!= True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Jump Enabled(Event Player, True);
		Set Move Speed(Event Player, Event Player.MoveSpeedPercent);
		Event Player.LastHero = Hero Of(Event Player);
	}
}

rule("Runners: Disable Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Event Player.LastHero;
		Array Contains(Array(Hero(Zarya), Hero(Torbjörn), Hero(Tracer), Hero(Symmetra), Hero(Wrecking Ball)), Hero Of(Event Player))
			== True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Jump Enabled(Event Player, True);
		Set Move Speed(Event Player, Event Player.MoveSpeedPercent);
		Event Player.LastHero = Hero Of(Event Player);
	}
}

rule("Highlight first Runner who reached the goal")
{
	event
	{
		Subroutine;
		HighlightFirstRunner;
	}

	actions
	{
		Global.bestRunner = First Of(Filtered Array(Players Within Radius(Global.endPos, Global.objectiveRadius, Team 2, Off), Is Alive(
			Current Array Element) && Current Array Element.PassedAllCheckpoints));
		Enable Built-In Game Mode Music;
		Disable Hero HUD(All Players(All Teams));
		Start Camera(All Players(All Teams), Update Every Frame(Eye Position(Global.bestRunner)) + World Vector Of(Vector(-0.400, 0, 0),
			Global.bestRunner, Rotation) + Up * 2.500 + Direction From Angles(Update Every Frame(Horizontal Facing Angle Of(
			Global.bestRunner)), 0) * 3, Update Every Frame(Eye Position(Global.bestRunner)), 100);
		Set Slow Motion(20);
		Wait(0.100, Ignore Condition);
		If(Random Integer(0, 3) == 0);
			Communicate(Global.bestRunner, Voice Line Up);
		Else If(Random Integer(0, 2) == 0);
			Communicate(Global.bestRunner, Voice Line Left);
		Else If(Random Integer(0, 1) == 0);
			Communicate(Global.bestRunner, Voice Line Right);
		Else;
			Communicate(Global.bestRunner, Voice Line Down);
		End;
		Big Message(All Players(All Teams), Custom String("{0} reached the goal!", Global.bestRunner));
		Wait(0.500, Ignore Condition);
		Set Slow Motion(100);
		Set Status(Global.bestRunner, Null, Rooted, 5);
		Wait(5, Ignore Condition);
		Stop Camera(All Players(All Teams));
		Global.bestRunner = Null;
		All Players(Team 2).ThirdPersonCamEnabled = False;
	}
}

rule("Restricted Zone")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Global.RESTRICTED_ZONE_ENABLED == True;
		Event Player.PassedAllCheckpoints == True;
		(Is Using Ultimate(Event Player) || Has Status(Event Player, Invincible)) == True;
		disabled Array Contains(Array(Hero(Doomfist), Hero(Winston), Hero(Zenyatta)), Hero Of(Event Player)) == True;
		Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(
			X Component Of(Global.endPos), 0, Z Component Of(Global.endPos))) <= Global.noUltimateRadius;
	}

	actions
	{
		If(Is Using Ultimate(Event Player) && Array Contains(Array(Hero(Doomfist), Hero(Zenyatta), Hero(Winston)), Hero Of(Event Player)));
			Set Ultimate Charge(Event Player, 0);
			Cancel Primary Action(Event Player);
		End;
		If((Is Using Ultimate(Event Player) && Array Contains(Array(Hero(Doomfist), Hero(Zenyatta), Hero(Winston)), Hero Of(Event Player)))
			|| Has Status(Event Player, Invincible));
			Start Forcing Player Position(Event Player, Position Of(Event Player), False);
			Set Status(Event Player, Null, Stunned, 1);
			If(Is Using Ultimate(Event Player) && Array Contains(Array(Hero(Doomfist), Hero(Zenyatta)), Hero Of(Event Player)));
				Wait Until(!Is Using Ultimate(Event Player), 10);
			End;
			Wait Until(!Has Status(Event Player, Invincible), 10);
			Stop Forcing Player Position(Event Player);
		End;
	}
}

disabled rule("camera start")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.SecCamPos == True;
	}
}

disabled rule("camera start")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.SecCamPos == True;
	}

	actions
	{
		Event Player.canSee = False;
		Event Player.CameraXPos = Vector(0, 0, 0);
		Event Player.CameraPos = Position Of(Event Player) + Vector(0, 80, 0);
		Set Invisible(Event Player, Enemies);
		Start Camera(Event Player, Event Player.CameraPos, Event Player.CameraPos + Vector(0, -80, 0), 10);
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player.CameraPos, Event Player.CameraPos + Vector(0, -80, 0), Color(
			Yellow), Visible To Position and Radius);
		Event Player.SeekerBeamColor = Color(Yellow);
		Event Player.SecCamLight_VisibleTo = Position Of(Event Player) + Vector(0, 0.200, 0);
		Start Forcing Player Position(Event Player, Event Player.SecCamLight_VisibleTo, True);
		Start Facing(Event Player, Up, 100, To World, None);
		Create Icon(All Players(All Teams), Event Player, Eye, Visible To and Position, Color(Violet), False);
		While(Event Player.SecCamPos);
			Event Player.CameraPos += Throttle Of(Event Player);
			disabled Event Player.CameraXPos += Throttle Of(Event Player);
			Wait(0.016, Ignore Condition);
		End;
	}
}

disabled rule("Not using camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.SecCamPos != True;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.endPos), To World);
		Wait(1.500, Ignore Condition);
		Stop Forcing Player Position(Event Player);
		Event Player.SeekerBeamColor = Null;
		Event Player.canSee = True;
	}
}

disabled rule("Toggle camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Event Player.SecCamPos = !Event Player.SecCamPos;
		Wait(0.250, Ignore Condition);
	}
}

disabled rule("Teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.SecCamPos == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.SecCamLight_VisibleTo = Nearest Walkable Position(Ray Cast Hit Position(Event Player.CameraPos,
			Event Player.CameraPos + Vector(0, -200, 0), All Players(All Teams), Event Player, True));
		Event Player.SecCamPos = False;
		disabled Teleport(Event Player, Ray Cast Hit Position(Event Player.CameraPos, Event Player.CameraPos + Vector(0, -200, 0), All Players(
			All Teams), Event Player, True));
		disabled Event Player.SecCamPos = False;
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 100);
	}
}

disabled rule("Camera zoom in")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.SecCamPos == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Event Player.CameraPos += Down;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Camera zoom out")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.SecCamPos == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Event Player.CameraPos += Up;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Disable abilities of Runner while protected")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 2;
		Event Player.isProtected == True;
	}

	actions
	{
		Set Status(Event Player, Null, Hacked, 99);
		Wait Until(!Event Player.isProtected, 99);
		Clear Status(Event Player, Hacked);
	}
}

rule("Runner died: Increase death count")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundInProgress == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Event Player.DeathCount += 1;
	}
}

rule("Apply movement speed penalty after death")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.RESURRECT_SPEED_PENALTY == True;
		Global.roundInProgress == True;
		Event Player.DeathCount >= 1;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		!Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Event Player.MoveSpeedPercent = 100 - Min(2, Event Player.DeathCount) * 10;
		Set Move Speed(Event Player, Event Player.MoveSpeedPercent);
		Abort If(Event Player.MoveSpeedPercent == 100);
		Wait(0.250, Ignore Condition);
		Small Message(Event Player, Custom String("{0} Resurrect aftereffects: Your movement speed decreased", Icon String(Poison)));
	}
}

rule("Restart match if there are no seekers")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundInProgress == True;
		Number Of Players(Team 1) == 0;
	}

	actions
	{
		Global.roundInProgress = False;
		Global.RestartCountdown = 10 + Max(20 - Total Time Elapsed, 0);
		Chase Global Variable At Rate(RestartCountdown, 0, 1, Destination and Rate);
		Enable Built-In Game Mode Music;
		Set Match Time(Global.RestartCountdown);
		Global.NoSeekers = True;
		disabled Big Message(All Players(All Teams), Custom String("No seekers - Game will restart soon"));
		Wait Until(Number Of Players(Team 1) > 1 || Global.RestartCountdown <= 0.200, 99999);
		Global.NoSeekers = False;
		Stop Chasing Global Variable(RestartCountdown);
		Skip If(Number Of Players(Team 1) == 0, 4);
		Big Message(All Players(All Teams), Custom String("Seekers joined - Resetting round.."));
		Set Match Time(Global.roundLength);
		Wait(1, Ignore Condition);
		Call Subroutine(resetRound);
		Abort If(Number Of Players(Team 1) >= 1);
		Declare Match Draw;
		Wait(2, Ignore Condition);
		Call Subroutine(SwitchPlayers);
	}
}

rule("No Seekers: Switch player to Seekers")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.NoSeekers == True;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		If(Number Of Players(Team 1) < 2);
			Move Player to Team(Event Player, Team 1, -1);
		End;
	}
}

rule("Only one Seeker: Switch player to Seekers")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) == 1;
		Number Of Players(Team 2) >= 7;
		Team Of(Event Player) == Team 2;
		disabled (Is In Spawn Room(Event Player) || Is Dead(Event Player)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Abort If(Number Of Players(Team 1) > 1);
		Big Message(All Players(All Teams), Custom String("{0} joined the Seekers", Event Player));
		Move Player to Team(Event Player, Team 1, -1);
	}
}

rule("Speed boost Seekers on CTF Maps")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
		Array Contains(Array(Map(Ilios Ruins), Map(Nepal Village), Map(Nepal Shrine), Map(Ilios Well), Map(Ilios Lighthouse), Map(
			Busan Sanctuary Lunar New Year), Map(Ayutthaya), Map(Lijiang Control Center Lunar New Year), Map(New Junk City), Map(Suravasa),
			Map(Samoa), Map(Volskaya Industries), Map(Temple of Anubis), Map(Oasis Gardens), Map(Nepal Sanctum), Map(Oasis City Center),
			Map(Oasis University), Map(Esperança), Map(Antarctic Peninsula), Map(Runasapi)), Current Map) == True;
	}

	actions
	{
		Wait Until(!Is In Spawn Room(Event Player), 99999);
		Small Message(Event Player, Custom String("You received a temporary speed boost"));
		Set Move Speed(Event Player, 350);
		Skip If(Event Player.EntitiesArray[9], 2);
		Create In-World Text(All Players(Team 2), Custom String("{2} {1} {0}", Ability Icon String(Hero(Soldier: 76), Button(Ability 1)),
			Event Player, Icon String(Skull)), Event Player, 1.300, Do Not Clip, Visible To Position and String, Color(Team 1),
			Default Visibility);
		Event Player.EntitiesArray[9] = Last Text ID;
		Wait(Array Contains(Array(Map(New Junk City), Map(Suravasa), Map(Ilios Ruins), Map(Runasapi)), Current Map) ? 8 : 6,
			Restart When True);
		Set Move Speed(Event Player, 150);
		Destroy In-World Text(Event Player.EntitiesArray[9]);
		Modify Player Variable(Event Player, EntitiesArray, Remove From Array By Index, 9);
	}
}

rule("Runner passed checkpoint")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.Checkpoints != Null;
		Global.roundInProgress == True;
		Event Player.isAlive == True;
		Event Player.PassedAllCheckpoints != True;
		Event Player.isMoving == True;
		Distance Between(Global.Checkpoints[Event Player.CheckpointsPassed], Position Of(Event Player)) <= Global.checkpointRadius;
	}

	actions
	{
		Event Player.CheckpointsPassed += 1;
		Big Message(Event Player, Custom String("{2} Checkpoint {0} reached{1} {2}", Event Player.CheckpointsPassed,
			Event Player.CheckpointsPassed == Count Of(Global.Checkpoints) ? Custom String(": Final Goal activated") : Custom String(
			": New Checkpoint {0} activated", Event Player.CheckpointsPassed + 1), Icon String(Exclamation Mark)));
		If(Event Player.CheckpointsPassed == Count Of(Global.Checkpoints));
			Event Player.PassedAllCheckpoints = True;
		End;
		Wait(0.016, Ignore Condition);
		If(Event Player.CheckpointsPassed > Global.CheckpointExtraTimeCount);
			Global.CheckpointExtraTimeCount += 1;
			Set Match Time(Match Time + Global.CheckpointExtraTime);
			Big Message(Remove From Array(All Players(All Teams), Event Player), Custom String("{2} {0} reached checkpoint {1}!", Event Player,
				Event Player.CheckpointsPassed, Hero Icon String(Hero Of(Event Player))));
			Wait(1, Ignore Condition);
			Small Message(All Players(All Teams), Custom String("   {0} seconds have been added to the remaining time",
				Global.CheckpointExtraTime));
		End;
	}
}

rule("Previous checkpoint acts as a safe zone")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.Checkpoints != Null;
		Global.roundInProgress == True;
		Event Player.CheckpointsPassed >= 1;
		Distance Between(Global.Checkpoints[Event Player.CheckpointsPassed - 1], Position Of(Event Player)) <= Global.checkpointRadius;
	}

	actions
	{
		Event Player.isInSafeZone = True;
		Event Player.seen = False;
		If(Has Status(Event Player, Burning));
			Clear Status(Event Player, Burning);
		End;
		Event Player.isProtected = True;
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Invincible, 9999);
		Heal(Event Player, Null, 50);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
		Event Player.isInSafeZone = False;
		Clear Status(Event Player, Invincible);
		Abort If(Event Player.SphereOfProtectionActive);
		Event Player.isProtected = False;
	}
}

rule("Update checkpoint status for Seekers")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Checkpoints != Null;
	}

	actions
	{
		Global.CheckpointsPassed = Last Of(Sorted Array(Filtered Array(Global.currentRunners, Entity Exists(Current Array Element)
			&& Is Alive(Current Array Element)), Current Array Element.CheckpointsPassed)).CheckpointsPassed;
		If(!Global.FinalGoalActive && Global.CheckpointsPassed == Count Of(Global.Checkpoints));
			Wait(1, Ignore Condition);
			Skip If(Global.FinalGoalActive, 2);
			Big Message(All Players(Team 1), Custom String("Final Goal has been activated"));
			Global.FinalGoalActive = True;
		Else If(Global.FinalGoalActive && Global.CheckpointsPassed < Count Of(Global.Checkpoints));
			Global.FinalGoalActive = False;
			Big Message(All Players(Team 1), Custom String("Final Goal disabled"));
		End;
		For Global Variable(CheckpointRunnersPassedIndex, 0, Count Of(Global.Checkpoints), 1);
			Global.CheckpointRunnersPassed[Global.CheckpointRunnersPassedIndex] = Count Of(Filtered Array(All Players(Team 2), Is Alive(
				Current Array Element) && Current Array Element.CheckpointsPassed > Global.CheckpointRunnersPassedIndex));
			Wait(0.016, Ignore Condition);
		End;
		Wait(1, Ignore Condition);
		Loop;
	}
}

rule("Set Total Time Elapsed (Workaround for an issue where Total Time Elapsed is inaccurate if directly used in HUD elements)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.TotalTimeElapsed = Update Every Frame(Total Time Elapsed);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

disabled rule("↓↓↓ CUSTOM HERO CHANGES ↓↓↓")
{
	event
	{
		Ongoing - Global;
	}
}

rule("|| LUCIO || Decrease Wallride Stamina")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.LucioWallrideStamina < 100;
		Is On Wall(Event Player) == True;
	}

	actions
	{
		Event Player.LucioWallrideStamina += Team Of(Event Player) == Team 1 ? 10 : 25;
		While(Is On Wall(Event Player) && Event Player.LucioWallrideStamina < 100);
			Wait(0.500, Ignore Condition);
			Event Player.LucioWallrideStamina += Team Of(Event Player) == Team 1 ? 2 : 4;
		End;
		If(Event Player.LucioWallrideStamina > 100);
			Event Player.LucioWallrideStamina = 100;
		End;
	}
}

rule("|| LUCIO || Increase Wallride Stamina")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.LucioWallrideStamina > 0;
		Is On Wall(Event Player) != True;
	}

	actions
	{
		Wait(1, Abort When False);
		While(!Is On Wall(Event Player) && Event Player.LucioWallrideStamina > 0);
			Wait(0.150, Abort When False);
			Event Player.LucioWallrideStamina -= Team Of(Event Player) == Team 1 ? 2 : 1;
		End;
		If(Event Player.LucioWallrideStamina < 0);
			Event Player.LucioWallrideStamina = 0;
		End;
	}
}

rule("|| LUCIO || Self Boop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.LucioWallrideStamina <= 75;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		If(Event Player.LucioWallrideStamina <= 75);
			Event Player.LucioWallrideStamina += 25;
			Apply Impulse(Event Player, -1 * Facing Direction Of(Event Player), 13, To World, Cancel Contrary Motion);
		End;
	}
}

rule("|| LUCIO || Disable Wallride")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.LucioWallrideStamina >= 100;
	}

	actions
	{
		Disallow Button(Event Player, Button(Jump));
	}
}

rule("|| LUCIO || Enable Wallride")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.LucioWallrideStamina < 100;
	}

	actions
	{
		Allow Button(Event Player, Button(Jump));
	}
}

rule("|| SOLDIER 76 || Decrease Stamina")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.SoldierSprintStamina < 100;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.SoldierSprintStamina += Team Of(Event Player) == Team 1 ? 1 : 2;
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
		If(Event Player.SoldierSprintStamina > 100);
			Event Player.SoldierSprintStamina = 100;
		End;
	}
}

rule("|| MERCY || Reset resurrection cooldown in spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.MERCY_RESURRECT_RESET == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Small Message(Event Player, Custom String("   {0} Resurrection cooldown has been reset {0}", Ability Icon String(Hero(Mercy),
			Button(Ability 2)), Icon String(Arrow: Down)));
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 99999);
	}
}

rule("|| SOLDIER 76 || Increase Stamina")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.SoldierSprintStamina > 0;
		Is Using Ability 1(Event Player) != True;
	}

	actions
	{
		Wait(1, Abort When False);
		While(!Is Using Ability 1(Event Player) && Event Player.SoldierSprintStamina > 0);
			Wait(0.500, Abort When False);
			Event Player.SoldierSprintStamina -= Team Of(Event Player) == Team 1 ? 4 : 2;
		End;
		If(Event Player.SoldierSprintStamina < 0);
			Event Player.SoldierSprintStamina = 0;
		End;
	}
}

rule("|| SOLDIER 76 || Disable Sprint")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.SoldierSprintStamina >= 100;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("|| SOLDIER 76 || Enable Sprint")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.SoldierSprintStamina < 100;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("|| Reinhardt || Set Initial Size")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Is In Spawn Room(Event Player) == False;
		disabled Custom String("{0}", Event Player) != Custom String("Cooksie");
	}

	actions
	{
		disabled Event Player.MoveSpeedPercent = 0.050;
		disabled Wait(10, Ignore Condition);
		Wait Until(!Is In Spawn Room(Event Player), 99999);
		Event Player.AbilityVar1 = 0.050;
		Start Scaling Player(Event Player, Event Player.AbilityVar1, True);
		Set Move Speed(Event Player, 110 * (Event Player.AbilityVar1 - 0));
		Start Modifying Hero Voice Lines(Event Player, 1.500 - Event Player.AbilityVar1 * 0.500, True);
	}
}

rule("|| Reinhardt || Bigger.. Stronger.. Faster")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		disabled Is Game In Progress == True;
		Is Using Ability 1(Event Player) == True;
		Is In Spawn Room(Event Player) == False;
		disabled Custom String("{0}", Event Player) != Custom String("Cooksie");
	}

	actions
	{
		Event Player.AbilityVar1 = Event Player.AbilityVar1 + 0.120;
		disabled Event Player.MoveSpeedPercent = Event Player.AbilityVar1;
		disabled Set Move Speed(Event Player, 100 * Event Player.AbilityVar1);
		Set Move Speed(Event Player, 100 * (Event Player.AbilityVar1 + 0.080));
		Wait Until(!Is Using Ability 1(Event Player), 8);
		Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.AbilityVar1 * 6);
	}
}

rule("|| Bastion || Ult")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		(Hero Of(Victim) == Hero(Orisa) && Is Using Ability 1(Victim)) != True;
	}

	actions
	{
		Victim.antiCampSleepStart = 0;
		Clear Status(Victim, Knocked Down);
		Clear Status(Victim, Asleep);
		Victim.SetStatus1 = Ability Icon String(Hero(Bastion), Button(Ultimate));
		Victim.SetStatus2 = 4;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 4, Destination and Duration);
		Set Status(Victim, Attacker, Knocked Down, 4);
		Apply Impulse(Victim, Vector(0, 5, 0), 25, To World, Cancel Contrary Motion);
	}
}

rule("|| Reinhardt || Ult")
{
	event
	{
		Player Dealt Damage;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Victim.antiCampSleepStart = 0;
		Clear Status(Victim, Knocked Down);
		Clear Status(Victim, Asleep);
		Set Facing(Victim, Facing Direction Of(Event Player) * -1, To World);
		Victim.SetStatus1 = Ability Icon String(Hero Of(Event Player), Button(Ultimate));
		Victim.SetStatus2 = 4;
		disabled Set Status(Victim, Event Player, Asleep, 2);
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 2, Destination and Duration);
		Set Status(Victim, Attacker, Knocked Down, 4);
	}
}

disabled rule("|| Mercy || Rez Debuff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.OrisaMount2.OrisaMount3 != Event Player;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Event Player.canBeSeen = True;
		Event Player.isMoving = True;
		Wait Until(!Is Using Ability 2(Event Player) == True || Event Player.isMoving == False || Is Moving(Event Player), 4);
		Event Player.isMoving = False;
		Event Player.canBeSeen = False;
	}
}

rule("|| BASTION || Speed boost while in alternate form")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 280 : 200);
		Wait Until(!Is In Alternate Form(Event Player), 99999);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 150 : Event Player.MoveSpeedPercent);
	}
}

rule("|| ROADHOG || Speedboost")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Firing Secondary(Event Player) == True;
		disabled !Has Status(Event Player, Hacked) == True;
		disabled Ability Resource(Event Player, Button(Secondary Fire)) >= 10;
		disabled Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 200 : 180);
		Wait Until(Hero Of(Event Player) != Hero(Roadhog) || Has Status(Event Player, Hacked) || !Is Firing Secondary(Event Player), 10);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 150 : Event Player.MoveSpeedPercent);
	}
}

rule("|| WRECKING BALL || Restrict Ball Form Duration")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is In Alternate Form(Event Player) == True;
		!Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Event Player.RollCountdown = Total Time Elapsed + 5;
		Create In-World Text(Event Player, Custom String("{0} {1}", Ability Icon String(Hero(Wrecking Ball), Button(Ability 1)),
			Round To Integer(Event Player.RollCountdown - Global.TotalTimeElapsed, Up)), Event Player, 1.400, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Wait Until(Hero Of(Event Player) != Hero(Wrecking Ball) || !Is In Alternate Form(Event Player), 5);
		Destroy In-World Text(Last Text ID);
		Wait Until(Is Alive(Event Player), 99999);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Team Of(Event Player) == Team 1 ? 20 : 40);
		disabled Set Ability Cooldown(Event Player, Button(Ability 1), Team Of(Event Player) == Team 1 ? 20 : 40);
		disabled Set Ability 1 Enabled(Event Player, False);
		disabled Wait Until(!Global.roundInProgress || Hero Of(Event Player) != Hero(Wrecking Ball), Team Of(Event Player) == Team 1 ? 20 : 40);
		disabled Abort If(Hero Of(Event Player) != Hero(Wrecking Ball));
		disabled Set Ability 1 Enabled(Event Player, True);
	}
}

rule("|| DVA || 2nd Life")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Event Player.seen = False;
		Stop All Damage Over Time(Event Player);
		Clear Status(Event Player, Burning);
	}
}

rule("|| ANA || Biotic Grenade Knockback")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		(Team Of(Event Player) == Team 2 ? Event Player.isMoving : True) == True;
		Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* 10, Null, Event Player, False), Position Of(Event Player)) <= 5;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), -15, To World, Cancel Contrary Motion);
		Wait Until(!Is Using Ability 2(Event Player), 99999);
	}
}

rule("|| ANA || Sleep Dart cooldown reduction on miss / Increase sleep duration for tanks by 30%")
{
	event
	{
		Player Dealt Damage;
		All;
		Ana;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Wait Until(!Is Using Ability 1(Event Player), 2);
		If(Array Contains(All Tank Heroes, Hero Of(Victim)));
			disabled Set Status(Victim, Null, Asleep, 7);
			Set Status(Victim, Null, Knocked Down, 5.200);
		End;
		Set Ability Cooldown(Event Player, Button(Ability 1), 30);
	}
}

rule("|| Ana || Ult - Cleanse")
{
	event
	{
		Player Dealt Healing;
		All;
		Ana;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Set Status(Healee, Event Player, Invincible, 2);
		Healee.isProtected = True;
		Healee.seen = False;
		Healee.canBeSeen = True;
		Stop All Damage Over Time(Healee);
		Clear Status(Healee, Burning);
		Set Invisible(Event Player, Enemies);
		Set Status(Healee, Event Player, Asleep, 5);
		Heal(Healee, Event Player, 1000);
		Healee.isProtected = False;
	}
}

rule("Toggle Hero Info")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.infoToggle = !Event Player.infoToggle;
		If(Event Player.infoToggle);
			Small Message(Event Player, Custom String("{0}{1}", Custom String("   {0}  ", Icon String(Checkmark)), Custom String(
				"Ability info visible")));
		Else;
			Small Message(Event Player, Custom String("{0}{1}", Custom String("   {0}  ", Icon String(No)), Custom String(
				"Ability info hidden")));
	}
}

rule("|| LIFEWEAVER || Deploy Petal Platform")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 10, All Players(All Teams), Event Player, True)) <= 3.500 && Count Of(Remove From Array(
			Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 100, All Players(All Teams), Event Player, True), 2.500, All Teams, Off), Event Player)) == 0);
			Set Ability 1 Enabled(Event Player, True);
			Press Button(Event Player, Button(Ability 1));
			Set Ability 1 Enabled(Event Player, False);
		Else;
			Small Message(Event Player, Custom String("Petal Platform can only be deployed below yourself"));
			Wait(0.250, Ignore Condition);
		End;
	}
}

rule("|| ZARYA & LIFEWEAVER || Projected Barrier & Lifeweaver: Life Grip")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 2;
		Has Status(Event Player, Invincible) == True;
		Event Player.isProtected != True;
		(!Is Using Ultimate(Event Player) || Hero Of(Event Player) != Hero(Zenyatta)) == True;
	}

	actions
	{
		Event Player.isProtected = True;
		Wait Until(!Has Status(Event Player, Invincible), 5);
		Wait(0.500, Restart When True);
		Abort If(Event Player.SphereOfProtectionActive);
		Event Player.isProtected = False;
	}
}

rule("|| ZARYA || Increase knockback")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Set Damage Received(Event Player, 0);
		Set Knockback Received(Event Player, Team Of(Event Player) == Team 1 ? 250 : 200);
		Wait(0.100, Ignore Condition);
		Set Knockback Received(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("|| DOOMFIST || Slow down while using Rocket Punch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 2;
		Hero Of(Event Player) == Hero(Doomfist);
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 70);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 5);
		Wait(0.500, Ignore Condition);
		Set Move Speed(Event Player, Event Player.MoveSpeedPercent);
	}
}

rule("|| DOOMFIST || Disable jump and ability 1 while using rocket punch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Jump Enabled(Event Player, False);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 99999);
		Wait(0.500, Ignore Condition);
		Wait Until(Horizontal Speed Of(Event Player) <= 5.500, 99999);
		Wait(0.500, Ignore Condition);
		Set Jump Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("|| DOOMFIST || Seismic Slam Cooldown")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Set Ability Cooldown(Event Player, Button(Ability 1), 30);
	}
}

rule("|| REAPER, MOIRA, GENJI & ECHO || Slow down while using Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 2;
		!Is In Spawn Room(Event Player) == True;
		Array Contains(Array(Hero(Reaper), Hero(Moira), Hero(Echo), Hero(Genji)), Hero Of(Event Player)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Set Move Speed(Event Player, 80);
		Wait Until(!Is Using Ability 1(Event Player), 5);
		Set Move Speed(Event Player, Event Player.MoveSpeedPercent);
	}
}

rule("|| TRACER || Recall to spawn room")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Tracer;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		If(Event Player.TracerRecalls >= Global.TRACER_RECALLS_PER_ROUND);
			Cancel Primary Action(Event Player);
			Set Status(Event Player, Null, Hacked, 10);
			Small Message(Event Player, Custom String("{0} You have no recalls left this round", Icon String(Warning)));
			Abort;
		End;
		Event Player.TracerRecalls += 1;
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		If(Event Player.CheckpointsPassed >= 1);
			Teleport(Event Player, Global.Checkpoints[Event Player.CheckpointsPassed - 1]);
		Else;
			Teleport(Event Player, Random Value In Array(Spawn Points(Team 2)));
		End;
	}
}

rule("|| TORB || Speed boost while overloading")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 180 : 120);
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 150 : Event Player.MoveSpeedPercent);
	}
}

rule("|| RAMATTRA || Speed boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ramattra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 160 : 130);
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 150 : Event Player.MoveSpeedPercent);
	}
}

rule("|| BAPTISTE || Mobile Safe Zone")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundInProgress == True;
		Global.MobileSafeZonePos != Null;
	}

	actions
	{
		Wait(Global.MOBILE_SAFE_ZONE_DURATION + 0.500, Abort When False);
		Global.MobileSafeZonePos = Null;
	}
}

rule("|| BAPTISTE || Mobile Safe Zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
		Team Of(Event Player) == Team 2;
		Global.roundInProgress == True;
		Global.MobileSafeZonePos == Null;
		Event Player.MobileSafeZoneCount < Global.MOBILE_SAFE_ZONES_PER_ROUND;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		Event Player.MobileSafeZonePos = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 30, All Players(All Teams), Event Player, True);
		If(Y Component Of(Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* 30, All Players(All Teams), Event Player, True)) <= 0 || Distance Between(Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 30, Null, Null, False), Global.endPos)
			<= Global.noUltimateRadius);
			Small Message(Event Player, Custom String("{0} Mobile Safe Zone cannot be placed here {0}", Icon String(Warning)));
			Wait(0.250, Ignore Condition);
			Abort;
		Else;
			Event Player.MobileSafeZoneCount += 1;
			Create Effect(All Players(All Teams), Sparkles, Color(Blue), Event Player.MobileSafeZonePos, Global.MOBILE_SAFE_ZONE_RADIUS,
				Visible To);
			Event Player.EntitiesArray[4] = Last Created Entity;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Event Player.MobileSafeZonePos, 100);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player.MobileSafeZonePos, 100);
			Wait(0.200, Ignore Condition);
			Global.MobileSafeZonePos = Event Player.MobileSafeZonePos;
			Create Effect(All Players(All Teams), Sphere, Custom Color(0, 120, 200, 255), Event Player.MobileSafeZonePos,
				Global.MOBILE_SAFE_ZONE_RADIUS, Visible To);
			Event Player.EntitiesArray[5] = Last Created Entity;
			Create Effect(All Players(All Teams), Energy Sound, Color(White), Event Player.MobileSafeZonePos, 60, Visible To);
			Event Player.EntitiesArray[6] = Last Created Entity;
			Wait(0.016, Ignore Condition);
			Create Beam Effect(All Players(All Teams), Good Beam, Event Player.MobileSafeZonePos, Event Player.MobileSafeZonePos + Vector(0,
				Global.MOBILE_SAFE_ZONE_RADIUS, 0), Custom Color(100, 100, 150, 150), Visible To);
			Event Player.EntitiesArray[7] = Last Created Entity;
			Create In-World Text(All Players(All Teams), Custom String("{0} Mobile Safe Zone ({1}) {0}", Ability Icon String(Hero(Baptiste),
				Button(Ability 1)), Round To Integer(Evaluate Once(Global.TotalTimeElapsed + Global.MOBILE_SAFE_ZONE_DURATION)
				- Global.TotalTimeElapsed, Up)), Event Player.MobileSafeZonePos + Vector(0, Global.MOBILE_SAFE_ZONE_RADIUS, 0) + Up, 1.500,
				Do Not Clip, Visible To and String, Color(White), Default Visibility);
			Event Player.EntitiesArray[8] = Last Text ID;
			Wait(Global.MOBILE_SAFE_ZONE_DURATION - 0.500, Ignore Condition);
			Destroy Effect(Event Player.EntitiesArray[4]);
			Destroy Effect(Event Player.EntitiesArray[5]);
			Destroy Effect(Event Player.EntitiesArray[6]);
			Destroy Effect(Event Player.EntitiesArray[7]);
			Destroy In-World Text(Event Player.EntitiesArray[8]);
		End;
	}
}

rule("|| BAPTISTE || Mobile Safe Zone")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundInProgress == True;
		Global.MobileSafeZonePos != Null;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Distance Between(Global.MobileSafeZonePos, Position Of(Event Player)) <= Global.MOBILE_SAFE_ZONE_RADIUS;
	}

	actions
	{
		Event Player.seen = False;
		If(Has Status(Event Player, Burning));
			Clear Status(Event Player, Burning);
		End;
		Event Player.isProtected = True;
		Set Status(Event Player, Null, Invincible, 9999);
		Heal(Event Player, Null, 50);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Event Player, Invincible);
		Abort If(Event Player.SphereOfProtectionActive);
		Event Player.isProtected = False;
	}
}

rule("|| Illari || Ult Stun")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Illari;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		disabled Victim.antiCampSleepStart = 0;
		Clear Status(Victim, Knocked Down);
		Clear Status(Victim, Asleep);
		Apply Impulse(Victim, Vector(Random Integer(-5, 5), 5, Random Integer(-5, 5)), Random Integer(5, 9), To World,
			Cancel Contrary Motion);
		Victim.SetStatus1 = Ability Icon String(Hero(Illari), Button(Ultimate));
		Victim.SetStatus2 = 3;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 3, Destination and Duration);
		Set Status(Victim, Attacker, Knocked Down, 3);
	}
}

rule("|| JUNKER QUEEN || Pull towards knife")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 28, To World, Cancel Contrary Motion);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
	}
}

rule("|| Junker Queen || Ability 2 - Speed Boost")
{
	event
	{
		Player Dealt Damage;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 16);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 275 : 210);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 150 : Event Player.MoveSpeedPercent);
	}
}

rule("|| SOMBRA || Workaround to disable passive Stealth")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	actions
	{
		If(!Has Status(Event Player, Asleep));
			Damage(Event Player, Null, 0.010);
		End;
		Wait(1.200, Ignore Condition);
		Loop;
	}
}

rule("|| SOMBRA || Translocating counts as moving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sombra;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.isMoving = True;
		Wait Until(!Is Using Ability 2(Event Player), 10);
		Wait(0.250, Ignore Condition);
		If(Horizontal Speed Of(Event Player) < 0.100);
			Event Player.isMoving = False;
	}
}

rule("|| SYMMETRA || Alternative Fire Knockback")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Set Reload Enabled(Event Player, False);
		Wait Until(!Is Firing Secondary(Event Player) || Ammo(Event Player, 0) <= Max Ammo(Event Player, 0) - 10, 99999);
		If(Ammo(Event Player, 0) <= Max Ammo(Event Player, 0) - 10);
			Wait Until(!Is Firing Secondary(Event Player), 1);
		End;
		If(!Event Player.SphereOfProtectionActive && Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 10, Null, Event Player, False), Position Of(Event Player)) <= 5);
			Apply Impulse(Event Player, Facing Direction Of(Event Player) * -1, (Max Ammo(Event Player, 0) - Ammo(Event Player, 0)) * 2,
				To World, Cancel Contrary Motion);
		End;
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0) - (Max Ammo(Event Player, 0) - Ammo(Event Player, 0)) * 10);
		While(Ammo(Event Player, 0) < Max Ammo(Event Player, 0));
			Wait(0.100, Ignore Condition);
			Set Ammo(Event Player, 0, Ammo(Event Player, 0) + 1);
		End;
		Allow Button(Event Player, Button(Secondary Fire));
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Reload Enabled(Event Player, True);
	}
}

disabled rule("|| SYMMETRA || Teleporter")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.roundInProgress == True;
		Is In Spawn Room(Event Player) != True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		If(Event Player.PassedAllCheckpoints && Distance Between(Position Of(Event Player), Global.endPos)
			< 30 + Global.objectiveRadius + Global.noUltimateRadius);
			Small Message(Event Player, Custom String("  {0} Teleporter can't be used here. You are too close to the goal (<{1}m) {0}",
				Icon String(No), 30 + Global.noUltimateRadius));
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 5);
			Abort;
		End;
		Set Status(Event Player, Null, Rooted, 9999);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)), 99999);
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 5);
			Clear Status(Event Player, Rooted);
			Abort;
		End;
		Allow Button(Event Player, Button(Primary Fire));
		Wait(0.800, Ignore Condition);
		Disallow Button(Remove From Array(All Players(All Teams), Event Player), Button(Interact));
		Wait(0.200, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 60);
		Start Holding Button(Event Player, Button(Interact));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Interact));
		Event Player.isMoving = True;
		Wait(0.750, Ignore Condition);
		Start Holding Button(Event Player, Button(Ability 2));
		Wait(0.100, Ignore Condition);
		Stop Holding Button(Event Player, Button(Ability 2));
		Wait(0.150, Ignore Condition);
		Clear Status(Event Player, Rooted);
		Cancel Primary Action(Event Player);
		Wait(3.150, Ignore Condition);
		Allow Button(All Players(All Teams), Button(Interact));
		If(Horizontal Speed Of(Event Player) < 0.100);
			Event Player.isMoving = False;
	}
}

rule("|| VENTURE || Abort Burrow if spotted")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Venture;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.isMoving == True;
		((Is In Line of Sight(Eye Position(Players In Slot(0, Team 1)), Event Player, Barriers Do Not Block LOS)
			== True && Is In View Angle(Players In Slot(0, Team 1), Event Player, 12) == True) || (Is In Line of Sight(Eye Position(
			Players In Slot(1, Team 1)), Event Player, Barriers Do Not Block LOS) == True && Is In View Angle(Players In Slot(1, Team 1),
			Event Player, 12) == True)) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(0.500, Ignore Condition);
		If(Is Using Ability 1(Event Player));
			Cancel Primary Action(Event Player);
		End;
	}
}

rule("|| VENTURE || Disable laser while Burrow is active")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Venture;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.canSee = False;
		Wait Until(!Is Using Ability 1(Event Player), 9999);
		Abort If(Event Player.isCrowdControlled);
		Event Player.canSee = True;
	}
}

disabled rule("↓↓↓ HERO LIMITS ↓↓↓")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Ana Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Ana), Team 2)) >= Global.HERO_ANA_LIMIT;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(Slot Of(Event Player) * 0.016, Ignore Condition);
		If((Hero Of(Event Player) == Hero(Ana) && Count Of(Players On Hero(Hero(Ana), Team 2)) > Global.HERO_ANA_LIMIT) || (Hero Of(
			Event Player) != Hero(Ana)));
			Modify Player Variable(Event Player, Available_Heroes, Remove From Array By Value, Hero(Ana));
			Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Ana Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Ana), Team 2)) < Global.HERO_ANA_LIMIT;
		Hero Of(Event Player) != Hero(Ana);
	}

	actions
	{
		Modify Player Variable(Event Player, Available_Heroes, Append To Array, Hero(Ana));
		Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Mercy Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Mercy), Team 2)) >= Global.HERO_MERCY_LIMIT;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(Slot Of(Event Player) * 0.016, Ignore Condition);
		If((Hero Of(Event Player) == Hero(Mercy) && Count Of(Players On Hero(Hero(Mercy), Team 2)) > Global.HERO_MERCY_LIMIT) || (Hero Of(
			Event Player) != Hero(Mercy)));
			Modify Player Variable(Event Player, Available_Heroes, Remove From Array By Value, Hero(Mercy));
			Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Mercy Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Mercy), Team 2)) < Global.HERO_MERCY_LIMIT;
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Modify Player Variable(Event Player, Available_Heroes, Append To Array, Hero(Mercy));
		Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Baptiste Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Baptiste), Team 2)) >= 1;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(Slot Of(Event Player) * 0.016, Ignore Condition);
		If((Hero Of(Event Player) == Hero(Baptiste) && Count Of(Players On Hero(Hero(Baptiste), Team 2)) > 1) || (Hero Of(Event Player)
			!= Hero(Baptiste)));
			Modify Player Variable(Event Player, Available_Heroes, Remove From Array By Value, Hero(Baptiste));
			Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Baptiste Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Baptiste), Team 2)) < 1;
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Modify Player Variable(Event Player, Available_Heroes, Append To Array, Hero(Baptiste));
		Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Zarya Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Zarya), Team 2)) >= Global.HERO_ZARYA_LIMIT;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(Slot Of(Event Player) * 0.016, Ignore Condition);
		If((Hero Of(Event Player) == Hero(Zarya) && Count Of(Players On Hero(Hero(Zarya), Team 2)) > Global.HERO_ZARYA_LIMIT) || (Hero Of(
			Event Player) != Hero(Zarya)));
			Modify Player Variable(Event Player, Available_Heroes, Remove From Array By Value, Hero(Zarya));
			Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

rule("Zarya Limit")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Count Of(Players On Hero(Hero(Zarya), Team 2)) < Global.HERO_ZARYA_LIMIT;
		Hero Of(Event Player) != Hero(Zarya);
	}

	actions
	{
		Modify Player Variable(Event Player, Available_Heroes, Append To Array, Hero(Zarya));
		Set Player Allowed Heroes(Event Player, Event Player.Available_Heroes);
	}
}

disabled rule("Player joined match: Switch to Seekers if there is only one")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Number Of Players(Team 1) == 1;
		Number Of Players(Team 2) >= 7;
	}

	actions
	{
		Move Player to Team(Event Player, Team 1, -1);
	}
}

rule("Privacy Settings for Runners")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		If(Global.DISABLE_SCOREBOARD >= 1);
			Disable Scoreboard(Event Player);
		Else;
			Enable Scoreboard(Event Player);
		End;
		If(Global.DISABLE_TEXTCHAT >= 1);
			Disable Text Chat(Event Player);
		Else;
			Enable Text Chat(Event Player);
		End;
		If(Global.DISABLE_NAMEPLATES >= 1);
			Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Else;
			Enable Nameplates(All Players(All Teams), All Players(All Teams));
		End;
		If(Global.DISABLE_VOICECHAT >= 1);
			Disable Voice Chat(Event Player, True, True, False);
		Else;
			Enable Voice Chat(Event Player);
		End;
	}
}

rule("Server Load")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String("Code: 996BJ | {1}\n          Server Health: {0}",
			Global.ServerLoad < 150 ? Custom String("Good") : (Global.ServerLoad < 200 ? Custom String("Moderate") : (
			Global.ServerLoad < 255 ? Custom String("Bad") : Custom String("{0} Critical {0}", Icon String(Warning)))),
			Global.VersionDate), Null, Right, -20, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Get server load average")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Global.ServerLoad = Server Load Average;
		Wait(1, Ignore Condition);
		Loop;
	}
}

disabled rule("Debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Custom String("XĔRX") == Custom String("{0}", Event Player);
	}

	actions
	{
		disabled Create HUD Text(Event Player, Null, Custom String("Server Load: {0} / {1} (avg) / {2} (peak)", Server Load, Server Load Average,
			Server Load Peak), Null, Right, 10, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Position Of(Event Player), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 10, All Players(All Teams), Event Player, True), Null, Null, Left, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Disable Movement Collision With Environment(Event Player, False);
		Create HUD Text(All Players(All Teams), Is True For Any(Global.currentRunners, Current Array Element.isNearSeeker[0] == True),
			Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

disabled rule("Fence")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Create Effect(Event Player, Sphere, Color(Green), Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)),
			Update Every Frame(Eye Position(Event Player)) + Update Every Frame(Facing Direction Of(Event Player)) * 25, Null,
			Event Player, False), 0.250, Visible To Position and Radius);
		Wait Until(!Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Destroy Effect(Last Created Entity);
		disabled Destroy Effect(Last Created Entity);
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.FenceStartPos = Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(
				Event Player)) + Update Every Frame(Facing Direction Of(Event Player)) * 25, Null, Event Player, False);
		Else;
		End;
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 10);
		Create Effect(Event Player, Sphere, Color(Green), Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)),
			Update Every Frame(Eye Position(Event Player)) + Update Every Frame(Facing Direction Of(Event Player)) * 25, Null,
			Event Player, False), 0.250, Visible To Position and Radius);
		Wait Until(!Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Destroy Effect(Last Created Entity);
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.FenceEndPos = Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(
				Event Player)) + Update Every Frame(Facing Direction Of(Event Player)) * 25, Null, Event Player, False);
		End;
	}
}

disabled rule("Fence")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create Effect(Event Player, Sphere, Color(Red), Event Player.FenceStartPos, 0.250, Visible To Position and Radius);
		Create Effect(Event Player, Sphere, Color(Red), Event Player.FenceEndPos, 0.250, Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.FenceStartPos, Event Player.FenceEndPos, Color(Red),
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Energy Sound, Color(White), Event Player.FenceStartPos, 50, Visible To Position and Radius);
	}
}

disabled rule("Fence")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.FenceEndPos != Null;
		Ray Cast Hit Player(Event Player.FenceStartPos, Event Player.FenceEndPos, All Players(Team 2), Event Player, False) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Burning, 5);
	}
}

rule("|| Orisa || Increased Mounted Speed")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.OrisaMount2 != Null;
	}

	actions
	{
		Set Move Speed(Event Player.OrisaMount2, 100 + 20);
	}
}

rule("|| Orisa || Remove Increased Mounted Speed")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Event Player.OrisaMount2.OrisaMount3 != Event Player;
		Event Player.OrisaMount2 == Null;
	}

	actions
	{
		Set Move Speed(Event Player.OrisaMount2, 100);
	}
}

rule("|| Orisa || Mount Setup")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Hero Of(Closest Player To(Event Player, All Teams)) == Hero(Orisa);
		Team Of(Event Player) == Team 2;
	}

	actions
	{
		Abort If(Distance Between(Closest Player To(Event Player, All Teams), Event Player) >= 3);
		Event Player.OrisaMount2 = Closest Player To(Event Player, All Teams);
		If(Hero Of(Event Player.OrisaMount2) != Hero(Orisa) || Team Of(Event Player.OrisaMount2) != Team 2);
			Event Player.OrisaMount2 = Null;
			Abort;
		Else;
			Disable Movement Collision With Players(Event Player);
			Event Player.OrisaMount2.OrisaMount3 = Event Player;
			disabled If(Hero Of(Event Player) == Hero(Mercy));
			disabled Small Message(Event Player, Custom String("{0} is lowering your CDs by 50%! Dismounting (Crouch) removes this buff",
				Hero Icon String(Hero(Orisa))));
			disabled Small Message(Event Player, Custom String("Mercy Secret Effect! {0} keeps you hidden while you ressurect people", Hero Icon String(
				Hero(Orisa))));
			disabled Else;
			disabled Small Message(Event Player, Custom String("{0} is lowering your CDs by 50%! Dismounting (Crouch) removes this buff",
				Hero Icon String(Hero(Orisa))));
			disabled End;
			Attach Players(Event Player, Event Player.OrisaMount2, Vector(0, (Y Component Of(Eye Position(Event Player.OrisaMount2))
				- Y Component Of(Position Of(Event Player.OrisaMount2))) / 2, -0.500));
			"123"
			Wait Until(Is Button Held(Event Player.OrisaMount2, Button(Melee)) || Is Dead(Event Player) || Is Dead(Event Player.OrisaMount2)
				|| Is Button Held(Event Player, Button(Crouch)) || Event Player.OrisaMount2.OrisaMount3 != Event Player, 99999);
			If(Is Button Held(Event Player.OrisaMount2, Button(Melee)));
				Set Status(Event Player, Null, Stunned, 1.500);
				disabled Apply Impulse(Event Player, Direction Towards(Event Player.OrisaMount2, Event Player), 15, To World, Cancel Contrary Motion);
			End;
			If(Event Player.OrisaMount2.OrisaMount3 == Event Player);
				Set Move Speed(Event Player.OrisaMount2, 100);
				Event Player.OrisaMount2.OrisaMount3 = Null;
				Event Player.OrisaMount2 = Null;
			End;
			Detach Players(Event Player);
			Enable Movement Collision With Players(Event Player);
	}
}

rule("|| Orisa || Detach")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.OrisaMount1 == True;
		Team Of(Event Player) == Team 2;
	}

	actions
	{
		Detach Players(Event Player);
		"eventPlayer.attachTo(eventPlayer.oriser, vect(0, eventPlayer.oriser.getEyePosition().y - eventPlayer.oriser.getPosition().y, -0.5))"
		Attach Players(Event Player, Event Player.OrisaMount2, Vector(0, (Y Component Of(Eye Position(Event Player.OrisaMount2))
			- Y Component Of(Position Of(Event Player.OrisaMount2))) / 2, -0.500));
		Event Player.OrisaMount1 = False;
	}
}

rule("|| Orisa || Mounted player reduced CDs")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.OrisaMount2.OrisaMount3 == Event Player;
		(Ability Cooldown(Event Player, Button(Ability 1)) || Ability Cooldown(Event Player, Button(Secondary Fire)) || Ability Cooldown(
			Event Player, Button(Ability 2))) != 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) / 2);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) / 2);
		If(Hero Of(Event Player) == Hero(Mercy));
			Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) / 3);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) / 2);
		End;
	}
}

rule("|| Orisa || Mounted player can be seen when mount is moving")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Hero Being Played(Hero(Orisa), Team 2) == True;
		Event Player.OrisaMount2.isMoving == True;
		Event Player.OrisaMount2.OrisaMount3 == Event Player;
		(Is Using Ability 2(Event Player.OrisaMount2) || Is Using Ability 1(Event Player.OrisaMount2)) == False;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Event Player.canBeSeen = True;
		Event Player.isMoving = True;
		Wait Until(Event Player.OrisaMount2.isMoving != True || Event Player.OrisaMount2.OrisaMount3 != Event Player || Is Using Ability 1(
			Event Player.OrisaMount2) || Is Using Ability 2(Event Player.OrisaMount2) == True, 99999);
		Event Player.isMoving = False;
		Event Player.canBeSeen = False;
	}
}

rule("|| Orisa || Mounted player remove CD reduction buff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.OrisaMount2.OrisaMount3 != Event Player;
		Hero Of(Event Player) != Hero(Zarya);
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) * 2);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) * 2);
		If(Hero Of(Event Player) == Hero(Mercy));
			Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) * 3);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) * 2);
		End;
	}
}

rule("|| Orisa || Title")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Team Of(Event Player) == Team 2;
	}

	actions
	{
		disabled Create In-World Text(Event Player.OrisaMount3 == Null ? Players Within Radius(Event Player, 3, Team 2, Off) : Null, Custom String(
			"title", Event Player.SetStatus1, Event Player.SetStatus2), Event Player + Vector(0, 1.500, 0), 1.100, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(Is Alive(Event Player) == True && Event Player.OrisaMount3 == Null && Hero Of(Event Player) == Hero(Orisa)
			? Players Within Radius(Event Player, 3, Team 2, Off) : Null, Custom String("Press [{0}] to ride me\r!\n[{1}] to jump off!",
			Input Binding String(Button(Interact)), Input Binding String(Button(Crouch))), Event Player + Vector(0, 2.450, 0), 1.100,
			Clip Against Surfaces, Visible To Position and String, Color(Green), Default Visibility);
	}
}

rule("|| Orisa || Spear Stun")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Orisa;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
		(Hero Of(Victim) == Hero(Orisa) && Is Using Ability 1(Victim)) != True;
	}

	actions
	{
		Victim.antiCampSleepStart = 0;
		Clear Status(Victim, Knocked Down);
		Clear Status(Victim, Asleep);
		Victim.SetStatus1 = Ability Icon String(Hero(Orisa), Button(Secondary Fire));
		Victim.SetStatus2 = 1.500;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 1.500, Destination and Duration);
		Set Status(Victim, Attacker, Stunned, 2);
		If(Event Player.OrisaMount3 != Null);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 2);
		End;
	}
}

rule("|| Orisa || Ult - Cleanse Rider")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.OrisaMount3 != Null;
		disabled Ultimate Charge Percent(Event Player) == 100;
		disabled (Is Using Ultimate(Event Player) || Is Meleeing(Event Player)) == True;
	}

	actions
	{
		Event Player.OrisaMount2.OrisaMount3 = Null;
		Event Player.OrisaMount2 = Null;
		Event Player.OrisaMount3.seen = False;
		Event Player.OrisaMount3.canBeSeen = False;
		Detach Players(Event Player.OrisaMount3);
		Apply Impulse(Event Player, Direction Towards(Event Player.OrisaMount3, Event Player), 15, To World, Cancel Contrary Motion);
		Stop All Damage Over Time(Event Player.OrisaMount3);
		Clear Status(Event Player.OrisaMount3, Burning);
		Event Player.OrisaMount3.isProtected = True;
		Set Invisible(Event Player.OrisaMount3, Enemies);
		Heal(Event Player.OrisaMount3, Event Player, 1000);
		Set Status(Event Player.OrisaMount3, Null, Stunned, 3);
		Wait Until(!Has Status(Event Player.OrisaMount3, Stunned), 5);
		Wait(0.500, Restart When True);
		Abort If(Event Player.OrisaMount3.SphereOfProtectionActive);
		Event Player.OrisaMount3.isProtected = False;
	}
}

rule("|| Orisa || Orisa Ult Stun")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		(Custom String("{0}", Event Player) == Custom String("Oniyoshi") || Custom String("{0}", Event Player) == Custom String(
			"Coldabyss") || Custom String("{0}", Event Player) == Custom String("oogieboogie")) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, 100000000);
		Set Ultimate Charge(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Resurrect(Event Player);
		Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ultimate), 0);
		Set Ability Cooldown(Event Player, Button(Interact), 0);
		Set Ability Cooldown(Event Player, Button(Jump), 0);
		Set Ability Cooldown(Event Player, Button(Crouch), 0);
		Set Ultimate Ability Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("Capture Progress - Artel")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Current Game Mode == Game Mode(Assault) || Current Game Mode == Game Mode(Hybrid)) == True;
	}

	actions
	{
		If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter) || Current Map == Map(Eichenwalde) || Current Map == Map(
			Eichenwalde Halloween));
			Create In-World Text(All Players(All Teams), Is Alive(Local Player) == True ? Custom String("{0}", Is Objective Complete(0)
				== True ? Custom String("") : Custom String("Capture Progress: {0}% ", Point Capture Percentage)) : Null, Objective Position(0)
				+ Vector(3.500, 1.700, 0), 1.150, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		Else If(Current Map == Map(Numbani));
			Create In-World Text(All Players(All Teams), Is Alive(Local Player) == True ? Custom String("{0}", Is Objective Complete(0)
				== True ? Custom String("") : Custom String("Capture Progress : {0}% ", Point Capture Percentage)) : Null, Objective Position(
				0) + Vector(0, 2.700, 0), 1.150, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		Else;
			Create In-World Text(All Players(All Teams), Is Alive(Local Player) == True ? Custom String("{0}", Is Objective Complete(0)
				== True ? Custom String("") : Custom String("Capture Progress : {0}% ", Point Capture Percentage)) : Null, Objective Position(
				0) + Vector(0, 1.700, 0), 1.150, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		End;
	}
}

rule("Capture Progress - Artel")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		(Custom String("{0}", Event Player) == Custom String("Oniyoshi") || Custom String("{0}", Event Player) == Custom String(
			"Coldabyss") || Custom String("{0}", Event Player) == Custom String("oogieboogie")) == True;
	}

	actions
	{
		Clear Status(Event Player, Asleep);
		Set Ultimate Charge(Event Player, 100);
		Clear Status(Event Player, Asleep);
		Player Closest To Reticle(Event Player, Team 2).isMoving = True;
	}
}

rule("Tutorial: Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.TutorialProgress = True;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
	}
}

rule("Tutorial: Create text array")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.TutorialChapters[0] = Custom String("{0} Welcome to the Tutorial of \"If I See You Move, You Die\"{0}", Icon String(
			Exclamation Mark));
		Global.TutorialTexts[0] = Custom String("");
		Global.TutorialTexts[1] = Custom String(
			"» You are a Runner. Your target is to reach the green goal without being spotted by the Seekers");
		Global.TutorialTexts[2] = Custom String(
			"» While you move, you will be visible for the Seekers. If a Seeker spots you, they can burn you with their laser");
		Global.TutorialTexts[3] = Custom String(
			"» Burn damage can only be stopped by going back to the spawn or a safe zone. The damage gets higher closer to the goal");
		Global.TutorialChapters[1] = Custom String("{0} How to move around safely {0}", Ability Icon String(Hero(Kiriko), Button(
			Ability 1)));
		Global.TutorialTexts[4] = Custom String(
			"» There is a delay after you stopped moving (only if you were in view of a Seeker) until you are invisible and safe again");
		Global.TutorialTexts[5] = Custom String(
			"» This delay depends on the distance you moved in the past 2 seconds (more distance traveled = longer visible after stopping)");
		Global.TutorialTexts[6] = Custom String(
			"» If you want to play it safe, only move slow and smaller distances, especially around corners");
		Global.TutorialChapters[2] = Custom String("{0} Beware of the cameras {0}", Ability Icon String(Hero(Lúcio), Button(
			Secondary Fire)));
		Global.TutorialTexts[7] = Custom String("» Seekers can place cameras around the map (blue circle with blinking red light)");
		Global.TutorialTexts[8] = Custom String(
			"» These detect any movement and alert the Seekers, but they won't get alerted if you move slowly by crouching");
		Global.TutorialTexts[9] = Custom String(
			"» Seekers can at any time see through the camera though and still spot you (orange circle when in use)");
		Global.TutorialChapters[3] = Custom String("{0} Anti-Camping System {0}", Ability Icon String(Hero(Ana), Button(Ability 1)));
		Global.TutorialTexts[10] = Custom String(
			"» Seekers will receive damage and get slept if they are near invisible Runners for too long");
		Global.TutorialTexts[11] = Custom String("» Runners gain a Sphere of Protection if they are watched for too long by Seekers");
		Global.TutorialTexts[12] = Custom String(
			"» These sphere protects you against the laser of the Seekers for a brief moment after activating");
		Global.TutorialChapters[4] = Custom String("{0} Checkpoints {0}", Icon String(Flag));
		Global.TutorialTexts[13] = Custom String("» Some maps have checkpoints each Runner must pass to activate the final goal");
		Global.TutorialTexts[14] = Custom String(
			"» An active checkpoint acts as a safe zone, which cleanses any burn damage and protects the Runner");
		Global.TutorialTexts[15] = Custom String("» Each activated checkpoint grants extra time for the Runners");
		Global.TutorialChapters[5] = Custom String("{0} You have reached the end of the tutorial {0}", Icon String(Checkmark));
		Global.TutorialTexts[16] = Custom String("» For more info and the latest changes visit https://discord.gg/QsHayHaDJT");
		Global.TutorialTexts[17] = Custom String("» Have fun and don't get spotted!");
	}
}

rule("Tutorial: Main")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.TutorialProgress == True;
	}

	actions
	{
		Disable Hero HUD(Event Player);
		Event Player.TutorialTextIndex = 0;
		For Player Variable(Event Player, TutorialChapter, 0, Count Of(Global.TutorialChapters), 1);
			Wait(1, Ignore Condition);
			For Player Variable(Event Player, TutorialTextLineNum, 0, 3, 1);
				Event Player.TutorialTextIndex += 1;
				Event Player.TutorialText[Event Player.TutorialTextLineNum] = Event Player.TutorialTextIndex;
				If(Count Of(Global.TutorialTexts) <= Event Player.TutorialTextIndex + 1);
					Break;
				End;
				Skip If(Event Player.TutorialTextLineNum == 2, 1);
				Wait Until(Evaluate Once(Event Player.TutorialProgress) < Event Player.TutorialProgress, 3);
			End;
			If(Count Of(Global.TutorialChapters) == Event Player.TutorialChapter + 1);
				Break;
			End;
			Wait Until(Evaluate Once(Event Player.TutorialProgress) < Event Player.TutorialProgress || Is Button Held(Event Player, Button(
				Secondary Fire)), 60);
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.TutorialProgress = False;
				Abort;
			End;
			Event Player.TutorialText[0] = 0;
			Event Player.TutorialText[1] = 0;
			Event Player.TutorialText[2] = 0;
		End;
		Wait(2, Ignore Condition);
		Event Player.TutorialProgress = False;
	}
}

rule("Tutorial: Progress increase")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.TutorialProgress == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.TutorialProgress += 1;
		Wait(0.100, Ignore Condition);
	}
}

rule("Tutorial: Stop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.TutorialProgress != True;
	}

	actions
	{
		Enable Hero HUD(Event Player);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Event Player.TutorialText[0] = 0;
		Event Player.TutorialText[1] = 0;
		Event Player.TutorialText[2] = 0;
	}
}

rule("Toggle Third Person Camera")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.ALLOW_THIRD_PERSON == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		disabled Small Message(All Players(All Teams), Custom String("  {0} Keep holding to toggle 3rd person camera {0}", Icon String(
			Exclamation Mark), Input Binding String(Button(Interact))));
		Wait(0.600, Abort When False);
		Event Player.ThirdPersonCamEnabled = !Event Player.ThirdPersonCamEnabled;
		Skip If(!Event Player.ThirdPersonCamEnabled, 1);
		Small Message(Event Player, Custom String("{0} Warning: {1} {0}", Icon String(Warning), Custom String(
			"Your position is revealed to the Seekers while the 3rd person cam is active")));
	}
}

rule("Third Person Camera")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.ThirdPersonCamEnabled == True;
	}

	actions
	{
		Stop Camera(Event Player);
		Start Camera(Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + World Vector Of(Vector(0,
			0.500, 0), Event Player, Rotation) + Facing Direction Of(Event Player) * -2.500, Null, Event Player, False),
			Event Player + Facing Direction Of(Event Player) * 1000, 80);
		Wait Until(!Event Player.ThirdPersonCamEnabled, 9999);
		Stop Camera(Event Player);
	}
}

rule("Tutorial: Continue from main array")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Array(Custom String("shin"), Custom String("Shin"), Custom String("HersheyBars"), Custom String("DeafGrannyMa"),
			Custom String("natuclbluue"), Custom String("EggSammich"), Custom String("HMR"), Custom String("Offai"), Custom String(
			"WhiskeyShark"), Custom String("Hansky"), Custom String("ChadaConda"), Custom String("Beansonbeans"), Custom String(
			"BeansonBeans"), Custom String("samipajami"), Custom String("YaGRLluciferEZ"), Custom String("HaveMercy")), Custom String(
			"{0}", Event Player)) == True;
	}

	actions
	{
		disabled Wait(9, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("{0} was banned for being a opp to Coldabyss.", Event Player));
		disabled Wait(10, Ignore Condition);
		Remove Player(Event Player);
	}
}

rule("|| MAUGA ||")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Custom String("{0}", Event Player) == Custom String("Coldabyss");
	}

	actions
	{
		"@Condition eventPlayer.getCurrentHero() != Hero.SOMBRA"
		Create In-World Text(Is Alive(Local Player) && Team Of(Local Player) == Team 2 ? Local Player : Empty Array, Custom String(
			"                             Coldabyss\n\r<Influencer, Celebrity, CEO, Baddie>"), Update Every Frame(Event Player), 0.950,
			Clip Against Surfaces, Visible To Position and Color, Custom Color(Min(Max(Absolute Value(Total Time Elapsed * 50 % 1530 - 765)
			- 255, 0), 255), Min(Max(Absolute Value((Total Time Elapsed * 50 + 510) % 1530 - 765) - 255, 0), 255), Min(Max(Absolute Value((
			Total Time Elapsed * 50 + 1020) % 1530 - 765) - 255, 0), 255), 255), Default Visibility);
	}
}

rule("|| MAUGA ||")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mauga;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVar1 = Position Of(Event Player);
		Small Message(Players Within Radius(Event Player.AbilityVar1, 8, All Teams, Off), Custom String(
			"{0} is increasing your Sphere of Protection %", Hero Icon String(Hero(Mauga))));
	}
}

rule("|| MAUGA ||")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mauga;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Players Within Radius(Event Player.AbilityVar1, 8, Team 2, Off).TimeWatchedBySeekers += 0.450;
		Play Effect(All Players(Team 2), Ring Explosion, Color(Blue), Event Player.AbilityVar1 + Vector(0, 1, 0), 7);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("|| SOMBRA || Hack - select target")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Is Firing Secondary(Event Player) == True;
		Event Player.AbilityVar1 == 0;
	}

	actions
	{
		Event Player.AbilityVar1 = Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 60);
		Wait(0.750, Ignore Condition);
		Skip If(Is True For Any(Event Player.AbilityVar1, Has Status(Current Array Element, Hacked)), 2);
		Event Player.AbilityVar1 = 0;
		Abort;
		Event Player.AbilityVar1 = First Of(Filtered Array(Event Player.AbilityVar1, Has Status(Current Array Element, Hacked)));
		Skip If(Distance Between(Position Of(Event Player), Position Of(Event Player.AbilityVar1)) < 15 || Is In Line of Sight(
			Eye Position(Event Player), Eye Position(Event Player.AbilityVar1), Enemy Barriers Block LOS), 2);
		Event Player.AbilityVar1 = 0;
		Abort;
		Event Player.AbilityVar1.SpeedModificationChange = 60;
		Event Player.AbilityVar1.SpeedModification = True;
		Event Player.AbilityVar1 = 0;
	}
}

rule("Modify Speed Routine Initiation")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.SpeedModification == True;
	}

	actions
	{
		Start Rule(SpeedChangeRoutine, Restart Rule);
	}
}

rule("Modify Speed Routine")
{
	event
	{
		Subroutine;
		SpeedChangeRoutine;
	}

	actions
	{
		Set Move Speed(Event Player, Team Of(Event Player)
			== Team 1 ? Event Player.SpeedModificationChange : Event Player.SpeedModificationChange);
		"3s"
		Wait(3, Ignore Condition);
		Set Move Speed(Event Player, Team Of(Event Player) == Team 1 ? 150 : Event Player.MoveSpeedPercent);
		Stop Transforming Throttle(Event Player);
		Event Player.SpeedModificationChange = Null;
		Event Player.SpeedModification = False;
	}
}

rule("|| SOMBRA || EMP LASER Disable")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Sombra);
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Small Message(Event Player, Custom String("Sombra disabled your laser for 3s. You can shoot with your gun though"));
		Set Primary Fire Enabled(Event Player, True);
		Victim.SetStatus1 = Ability Icon String(Hero(Sombra), Button(Ultimate));
		Victim.SetStatus2 = 3.200;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 3.200, Destination and Duration);
		Victim.canSee = False;
		Wait(3.500, Ignore Condition);
		Victim.canSee = True;
		Wait(0.250, Ignore Condition);
		Victim.canSee = False;
		Wait(0.200, Ignore Condition);
		Victim.canSee = True;
		Set Primary Fire Enabled(Event Player, False);
	}
}

rule("|| Ana || Nade Laser Disable")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Ana);
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Small Message(Event Player, Custom String("Ana disabled your laser for 3s. You can shoot with your gun though"));
		Set Primary Fire Enabled(Event Player, True);
		Set Ability Cooldown(Attacker, Button(Ability 1), Ability Cooldown(Attacker, Button(Ability 1)) + 15);
		Victim.SetStatus1 = Ability Icon String(Hero(Sombra), Button(Ultimate));
		Victim.SetStatus2 = 3.200;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 3.200, Destination and Duration);
		Victim.canSee = False;
		Wait(3.500, Ignore Condition);
		Victim.canSee = True;
		Wait(0.250, Ignore Condition);
		Victim.canSee = False;
		Wait(0.200, Ignore Condition);
		Victim.canSee = True;
		Set Primary Fire Enabled(Event Player, False);
	}
}

rule("|| Venture || Secondary Boop + Stun")
{
	event
	{
		Player Dealt Knockback;
		All;
		Venture;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Apply Impulse(Victim, Event Direction, 5, To World, Cancel Contrary Motion);
		Set Status(Remove From Array(Players Within Radius(Victim, 2, Opposite Team Of(Team Of(Event Player)), Off), Event Player), Null,
			Stunned, 2);
		Wait(0.050, Ignore Condition);
	}
}

rule("|| Venture || Ult Boop + Stun")
{
	event
	{
		Player Dealt Knockback;
		All;
		Venture;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Apply Impulse(Victim, Event Direction, 20, To World, Cancel Contrary Motion);
		Set Status(Victim, Attacker, Stunned, 1.500);
	}
}

rule("|| Echo ||  Boop")
{
	event
	{
		Player Dealt Damage;
		All;
		Echo;
	}

	conditions
	{
		(Event Ability == Button(Secondary Fire) || Event Ability == Button(Ability 2)) == True;
	}

	actions
	{
		Apply Impulse(Victim, Event Direction, 20, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
	}
}

rule("|| Echo || speed boost orb")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.AbilityVar2 = Eye Position(Event Player);
		Create Projectile(Orb Projectile, Event Player, Event Player.AbilityVar2 + Vector(Random Integer(-3, 3), 0, 0), Null, To World,
			Damage, Team 2, 0.500, 1, 0, Bad Explosion, Explosion Sound, 0, 0.100, 10, 0, 0, 0);
	}
}

rule("|| Echo || Speed Modification Init")
{
	event
	{
		Player Dealt Damage;
		All;
		Echo;
	}

	conditions
	{
		Victim != Event Player;
	}

	actions
	{
		Victim.SpeedModificationChange = 150;
		Victim.SpeedModification = True;
		disabled Small Message(Victim, Custom String("{0}'s cherry flavored rocket fuel increased your movement speed by 50% for 3s",
			Hero Icon String(Hero(Echo))));
	}
}

rule("Anti Crash 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load > 250;
		Global.antiCrashActivated == False;
	}

	actions
	{
		disabled Small Message(All Players(All Teams), Custom String("Coldabyss activated Anti-crash mode!"));
		Wait(2.600, Abort When False);
		Set Slow Motion(5);
		Set Aim Speed(All Players(All Teams), 5);
		Global.antiCrashStack += 1;
		Global.antiCrashActivated = True;
	}
}

rule("Anti Crash 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashActivated == True;
		Server Load < 240;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Set Slow Motion(100);
		Set Aim Speed(All Players(All Teams), 100);
		Global.antiCrashActivated = False;
	}
}

rule("|| ROADHOG || Stun Trap")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Status(Victim, Null, Stunned, 0.100);
	}
}

rule("|| Mauga || Rush Stun")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Mauga;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Victim.antiCampSleepStart = 0;
		Clear Status(Victim, Knocked Down);
		Clear Status(Victim, Asleep);
		Apply Impulse(Victim, Vector(Random Integer(-5, 5), 5, Random Integer(-5, 5)), Random Integer(5, 9), To World,
			Cancel Contrary Motion);
		Victim.SetStatus1 = Ability Icon String(Hero(Mauga), Button(Ability 1));
		Victim.SetStatus2 = 2;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 2, Destination and Duration);
		Set Status(Victim, Attacker, Stunned, 2.100);
	}
}

disabled rule("Debug Dummies")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Custom String("{0}", Event Player) == Custom String("Oniyoshi");
	}

	actions
	{
		Create Dummy Bot(Hero(Orisa), Team 2, -1, Position Of(Event Player), Event Player);
		Create Dummy Bot(Hero(Ana), Team 1, -1, Position Of(Event Player), Event Player);
	}
}

rule("Seeker CC Title")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create In-World Text(Event Player.SetStatus2 != 0 ? All Players(All Teams) : Null, Custom String("{0} {1} ",
			Event Player.SetStatus1, Event Player.SetStatus2), Event Player + Vector(0, 1.500, 0), 1.100, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("Hero info hud")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Hero Changes"
		Create Progress Bar HUD Text(Filtered Array(All Players(Team 2), Local Player.TimeWatchedBySeekers != 0),
			Local Player.TimeWatchedBySeekers * 12.500, Custom String("Sphere Status..."), Top, 4, Color(Blue), Color(White),
			Visible To Values and Color, Default Visibility);
		"Blank lines for progress bar to be dispalyed near bottom of screen"
		Create HUD Text(Filtered Array(All Players(Team 2), Local Player.TimeWatchedBySeekers != 0), Null, Null, Custom String(
			" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, 3, Null, Null, Null,
			Visible To and String, Default Visibility);
		disabled Create HUD Text(Filtered Array(All Players(Team 2), Local Player.TimeWatchedBySeekers != 0), Null, Null, Custom String(
			" \r\n\r\n\r\n\r\n\r\n"), Top, 3, Null, Null, Null, Visible To and String, Default Visibility);
		Create HUD Text(Local Player.infoToggle ? Local Player : Empty Array, Null, Null, Custom String("{0}{1}", Custom String(
			"▼ Custom Abilities ▼"), Custom String("")), Left, 3, Null, Null, Color(Orange), Visible To and Sort Order, Visible Never);
		"Ana"
		Create HUD Text((Hero Of(Local Player) == Hero(Ana) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {1} (Self use) - Boop yourself up\n| {1} (On Seeker) - Disable seeker's laser for 3s. +15s CD on Sleep\n| {0} Cleanses burning r",
			Ability Icon String(Hero(Ana), Button(Ultimate)), Ability Icon String(Hero(Ana), Button(Ability 2))), Custom String("")), Null,
			Left, 4, Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		"Bastion"
		Create HUD Text((Hero Of(Local Player) == Hero(Bastion) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {0} Increased Movement Speed\r\n| {1} 150% Increased Knockback\r\n| {2} Knock back and Knock down seeker",
			Ability Icon String(Hero(Bastion), Button(Ability 1)), Ability Icon String(Hero(Bastion), Button(Secondary Fire)),
			Ability Icon String(Hero(Bastion), Button(Ultimate))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Lifeweaver"
		Create HUD Text((Hero Of(Local Player) == Hero(Lifeweaver) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}", Custom String(
			"| {0} Protects target from seekers during pull", Ability Icon String(Hero(Lifeweaver), Button(Ability 2)))), Null, Left, 4,
			Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		"JunkerQueen"
		Create HUD Text((Hero Of(Local Player) == Hero(Junker Queen) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {0} Pushes you forward\r\n| {1} Greatly increase speed for 2s when you damage a seeker", Ability Icon String(Hero(
			Junker Queen), Button(Secondary Fire)), Ability Icon String(Hero(Junker Queen), Button(Ability 2))), Custom String("")), Null,
			Left, 4, Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		"Lúcio"
		Create HUD Text((Hero Of(Local Player) == Hero(Lúcio) ? Local Player : Empty Array).infoToggle ? Local Player : Empty Array, Null,
			Custom String("{0}{1}", Custom String(
			"| {0} Wall riding decreases your stamina\r\n| {1} Boop yourself in opposite direction (-25 stamina)", Hero Icon String(Hero(
			Lúcio)), Ability Icon String(Hero(Lúcio), Button(Secondary Fire))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Mercy"
		Create HUD Text((Hero Of(Local Player) == Hero(Mercy) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| Going to spawn resets {0} cooldown", Ability Icon String(Hero(Mercy), Button(Ability 2))), Custom String("")), Null, Left,
			4, Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		Create HUD Text((Hero Of(Local Player) == Hero(Cassidy) ? Local Player : Empty Array).infoToggle ? Local Player : Empty Array,
			Null, Custom String("{0}{1}", Custom String("| {0} Stuns enemy for 1s", Ability Icon String(Hero(Cassidy), Button(Ability 2))),
			Custom String("")), Null, Left, 4, Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		"Illari"
		Create HUD Text((Hero Of(Local Player) == Hero(Illari) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String("| {0} Stun seeker for 3s",
			Ability Icon String(Hero(Illari), Button(Ultimate))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Torb"
		Create HUD Text((Hero Of(Local Player) == Hero(Torbjörn) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String("| {0} Stun seeker for .5s",
			Ability Icon String(Hero(Torbjörn), Button(Melee))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Mauga"
		Create HUD Text((Hero Of(Local Player) == Hero(Mauga) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {1} - Stun for 2s\n| {0} + near by players Sphere of Protection \n   progress % every .5s", Ability Icon String(Hero(Mauga),
			Button(Ultimate)), Ability Icon String(Hero(Mauga), Button(Ability 1))), Custom String("")), Null, Left, 4, Null, Color(Blue),
			Null, Visible To and Sort Order, Visible Never);
		"Sombra"
		Create HUD Text((Hero Of(Local Player) == Hero(Sombra) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {0} - Slow seeker for 3s \n| {1} - Disable seeker laser for 3s", Ability Icon String(Hero(Sombra), Button(Secondary Fire)),
			Ability Icon String(Hero(Sombra), Button(Ultimate))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Orisa"
		Create HUD Text((Hero Of(Local Player) == Hero(Orisa) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| You are HORSE!\r\n  | When mounted you move 20% faster\r\n  | Rider get CDs cut in half\r\n  | [Melee] to knock the rider off\r\n{2}\r",
			Input Binding String(Button(Melee)), Input Binding String(Button(Melee)), Custom String(
			"| {0} & {1} Makes rider invisible when you move\r\n| {2}", Ability Icon String(Hero(Orisa), Button(Ability 2)),
			Ability Icon String(Hero(Orisa), Button(Ability 1)), Custom String("{0} Stun seeker for 2s\n| {1} Cleanse and protect rider",
			Ability Icon String(Hero(Orisa), Button(Secondary Fire)), Ability Icon String(Hero(Orisa), Button(Ultimate))))), Custom String(
			"")), Null, Left, 4, Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		"Reinhardt"
		Create HUD Text((Hero Of(Local Player) == Hero(Reinhardt) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {0} Start out slow and tiny\r\n| {1} Increase speed & size \r\n| {2} Sleep & taunt seeker for 2s", Icon String(Spiral),
			Ability Icon String(Hero(Reinhardt), Button(Ability 1)), Ability Icon String(Hero(Reinhardt), Button(Ultimate))),
			Custom String("")), Null, Left, 4, Null, Color(Blue), Null, Visible To and Sort Order, Visible Never);
		"Roadhog"
		Create HUD Text((Hero Of(Local Player) == Hero(Roadhog) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {1} Hold to increase speed\r\n| {2} stun", Icon String(Spiral), Ability Icon String(Hero(Roadhog), Button(Secondary Fire)),
			Ability Icon String(Hero(Roadhog), Button(Ability 2))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Venture"
		Create HUD Text((Hero Of(Local Player) == Hero(Venture) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {0} Stun target \n| {1} each hit stuns and boops", Ability Icon String(Hero(Venture), Button(Secondary Fire)),
			Ability Icon String(Hero(Venture), Button(Ultimate))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Echo"
		Create HUD Text((Hero Of(Local Player) == Hero(Echo) ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}{1}", Custom String(
			"| {0} & {1} Boop target \n| {2} Drop 2 cherry sodas that increase someone's \n  movement speed by 50% when consumed",
			Ability Icon String(Hero(Echo), Button(Secondary Fire)), Ability Icon String(Hero(Echo), Button(Ability 2)),
			Ability Icon String(Hero(Echo), Button(Ability 1))), Custom String("")), Null, Left, 4, Null, Color(Blue), Null,
			Visible To and Sort Order, Visible Never);
		"Special abilities"
		Create HUD Text((Local Player.OrisaMount2.OrisaMount3 == Local Player ? Local Player : Empty Array).infoToggle ? (Team Of(
			Local Player) == Team 2 ? Local Player : Empty Array) : Empty Array, Null, Null, Custom String("{0}{1}", Custom String(
			"▼ Special {0} Rider Abilities ▼", Hero Icon String(Hero(Orisa))), Custom String("")), Left, 5, Null, Null, Color(Green),
			Visible To and Sort Order, Visible Never);
		"Orisa"
		Create HUD Text((Hero Of(Local Player) == Hero(Orisa) && Local Player.OrisaMount3 != Null ? Local Player : Empty Array)
			.infoToggle ? (Team Of(Local Player) == Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}",
			Custom String("| {0} {1} is riding you. \r", Hero Icon String(Hero Of(Local Player.OrisaMount3)), Local Player.OrisaMount3)),
			Null, Left, 6, Null, Color(Green), Null, Visible To Sort Order and String, Visible Never);
		"Mercy"
		Create HUD Text((Hero Of(Local Player) == Hero(Mercy)
			&& Local Player.OrisaMount2.OrisaMount3 == Local Player ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}", Custom String(
			"| Orisa buffed your abilities\n   | {0} Rez CD reduced by 300%", Ability Icon String(Hero(Mercy), Button(Ability 2)))), Null,
			Left, 6, Null, Color(Green), Null, Visible To and Sort Order, Visible Never);
		Create HUD Text((Hero Of(Local Player) != Hero(Mercy)
			&& Local Player.OrisaMount2.OrisaMount3 == Local Player ? Local Player : Empty Array).infoToggle ? (Team Of(Local Player)
			== Team 2 ? Local Player : Empty Array) : Empty Array, Null, Custom String("{0}", Custom String(
			"| Orisa buffed your abilities\n   | 50% lower cooldowns!!")), Null, Left, 6, Null, Color(Green), Null,
			Visible To and Sort Order, Visible Never);
		"Hide Scoreboard"
		Create HUD Text(All Players(All Teams), Null, Custom String("{0}{1}", Custom String("{0} [Hold {1}]",
			Local Player.infoToggle ? Custom String("Hide ability info") : Custom String("View abilities info"), Input Binding String(
			Button(Reload))), Custom String("")), Null, Left, 7, Null, Color(Orange), Null, Visible To Sort Order and String,
			Visible Never);
	}
}

rule("Anti Crash Restart")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.antiCrashStack == 4;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Restarting game due to unstable servers..."));
		Wait(0.100, Ignore Condition);
		Set Slow Motion(100);
		Declare Match Draw;
		Wait(2, Ignore Condition);
		Skip If(Global.SWITCH_SEEKERS == 0, 2);
		Wait(Global.SWITCH_SEEKERS == 2 ? 25 : 5, Ignore Condition);
		Call Subroutine(SwitchPlayers);
		Wait(1, Ignore Condition);
		Restart Match;
	}
}

disabled rule("Create HUD events / Implemented by Halex (modified from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.EventSelected == 1;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Global.EventInProgress == 1 ? Custom String("Mass Teleportation in.. {0}",
			Global.Custom_CD) : (Global.EventInProgress == 2 ? (Global.greenredlights ? Custom String("{0} STOP! RED LIGHT!", Icon String(
			Sad)) : Custom String("{0} GREEN LIGHT!", Icon String(Happy))) : (Global.EventInProgress == 3 ? Custom String(
			"{0} {1} has been resurrected {0}", Ability Icon String(Hero(Mercy), Button(Ability 2)), Global.MiniEventsToggle[3])
			: Custom String(""))), Null, Null, Top, 3, Global.EventInProgress == 1 ? Custom Color(125, 75, 255, 255) : (
			Global.EventInProgress == 2 ? (Global.greenredlights ? Color(Red) : Color(Green)) : (Global.EventInProgress == 3 ? Color(
			Yellow) : Color(Yellow))), Color(White), Color(White), Visible To String and Color, Default Visibility);
		Create HUD Text(Global.Event_true == 0 ? All Dead Players(Team 2) : Empty Array, Null, Null, Custom String(
			"Wait for the next event to vote for the one you want to apply to the game"), Top, 6, Null, Null, Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Global.Event_true == 1 ? All Dead Players(Team 2) : Empty Array, Icon String(Flag), Custom String("Time to vote"),
			String("{0} sec", Global.Event_CD), Top, 5, Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Global.Event_true == 2 ? All Dead Players(All Teams) : Empty Array, Icon String(Flag), Custom String("Event time"),
			String("{0} sec", Global.Event_CD), Top, 5, Color(Yellow), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Is Dead(Local Player) == True && Global.Event_true == 1 ? All Players(All Teams) : Empty Array, Null,
			Custom String("{0} {1}\r/2 votes\n{2}", Icon String(Dizzy), Count Of(Remove From Array(Global.Event_1, 0)), Custom String(
			"Press [{0} + {1}] TO VOTE\r\nSwap player positions", Input Binding String(Button(Ability 1)), Input Binding String(Button(
			Crouch)))), Null, Left, 100 - Count Of(Remove From Array(Global.Event_1, 0)), Null, Color(Aqua), Null, Visible To and String,
			Default Visibility);
		Create HUD Text(Is Dead(Local Player) == True && Global.Event_true == 1 ? All Players(All Teams) : Empty Array, Null,
			Custom String("{0} {1}\r/3 votes\n{2}", Icon String(Warning), Count Of(Remove From Array(Global.Event_7, 0)), Custom String(
			"Press [{0} + {1}] TO VOTE\r\nGREEN LIGHT! RED LIGHT!", Input Binding String(Button(Reload)), Input Binding String(Button(
			Crouch)))), Null, Left, 100 - Count Of(Remove From Array(Global.Event_7, 0)), Null, Color(Lime Green), Null,
			Visible To and String, Default Visibility);
		disabled Create HUD Text(Is Dead(Local Player) == True && Global.Event_true == 1 ? All Players(All Teams) : Empty Array, Null,
			Custom String("{0} {1}\r\n{2}", Icon String(Recycle), Count Of(Remove From Array(Global.EventLoop, 0)), Custom String(
			"Press [{0} + {1}] TO VOTE (4 votes needed)\nRevive Bastions and change all heroes", Input Binding String(Button(Melee)),
			Input Binding String(Button(Crouch)))), Null, Left, 100 - Count Of(Remove From Array(Global.EventLoop, 0)), Null, Color(
			Violet), Null, Visible To and String, Default Visibility);
		Create HUD Text(Is Dead(Local Player) == True && Global.Event_true == 1 ? All Players(All Teams) : Empty Array, Null,
			Custom String("{0} {1}\r/2 votes\n{2}", Ability Icon String(Hero(Mercy), Button(Ability 2)), Count Of(Remove From Array(
			Global.Custom_CD, 0)), Custom String("Press [{0} + {1}]  TO VOTE\r\n50% Chance to Rez\na random player!", Input Binding String(
			Button(Ultimate)), Input Binding String(Button(Crouch)))), Null, Left, 100 - Count Of(Remove From Array(Global.Custom_CD, 0)),
			Null, Color(Yellow), Null, Visible To and String, Default Visibility);
		disabled Create HUD Text(Is Dead(Local Player) == True && Global.Event_true == 1 ? All Players(All Teams) : Empty Array, Null,
			Custom String("{0} {1}\r\n{2}", Icon String(Question Mark), Count Of(Remove From Array(Global.EventInProgress, 0)),
			Custom String("Press [{0} + {1}] TO VOTE (4 votes needed)\nRevive Bastions and change all heroes", Input Binding String(Button(
			Interact)), Input Binding String(Button(Crouch)))), Null, Left, 100 - Count Of(Remove From Array(Global.EventInProgress, 0)),
			Null, Color(Aqua), Null, Visible To and String, Default Visibility);
	}
}

disabled rule("EVENT APPARITION / Implemented by Halex (modified from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Dead Players(All Teams) > 0;
		Global.Event_true == 0;
		Is Game In Progress == True;
		disabled Global.EventSelected == 1;
	}

	actions
	{
		Wait(Random Real(20, 25), Abort When False);
		Global.Event_CD = 10;
		Chase Global Variable Over Time(Event_CD, 0, 7, Destination and Duration);
		Small Message(All Dead Players(All Teams), Custom String("Spectators are voting..."));
		Small Message(All Dead Players(All Teams), Custom String("Choose an event to apply to the remaining players"));
		Global.Event_true = 1;
		Wait(8, Ignore Condition);
		Global.Event_final[0] = Count Of(Remove From Array(Global.Event_1, 0));
		Global.Event_final[1] = Count Of(Remove From Array(Global.Event_2, 0));
		Global.Event_final[2] = Count Of(Remove From Array(Global.Event_3, 0));
		Global.Event_final[3] = Count Of(Remove From Array(Global.Event_4, 0));
		Global.Event_final[4] = Count Of(Remove From Array(Global.Event_5, 0));
		Global.Event_final[5] = Count Of(Remove From Array(Global.Event_6, 0));
		Global.Event_final[6] = Count Of(Remove From Array(Global.Event_7, 0));
		Global.Event_final[7] = Count Of(Remove From Array(Global.EventLoop, 0));
		Global.Event_final[8] = Count Of(Remove From Array(Global.Custom_CD, 0));
		Global.Event_final[9] = Count Of(Remove From Array(Global.EventInProgress, 0));
		If(Count Of(Remove From Array(Global.Event_1, 0)) >= 2 && Last Of(Sorted Array(Global.Event_final, Current Array Element))
			== Count Of(Remove From Array(Global.Event_1, 0)));
			Global.EventInProgress = 1;
			Global.Custom_CD = 3;
			Chase Global Variable Over Time(Custom_CD, 0, 3, Destination and Duration);
			Wait(3, Ignore Condition);
			Global.Event_CD = 10;
			Chase Global Variable Over Time(Event_CD, 0, 10, Destination and Duration);
			Global.Event_true = 2;
			Small Message(All Players(All Teams), Custom String("Mass teleportation event initated..."));
			Global.Event_true = 2;
			Abort If(Global.bestRunner != Null);
			For Global Variable(EventLoop, 0, (Count Of(All Players(All Teams)) - 1) / 2, 1);
				Global.MiniEventsToggle[3] = Random Value In Array(Filtered Array(All Players(All Teams), Has Spawned(Current Array Element)
					&& !Is In Spawn Room(Current Array Element)));
				Global.MiniEventsToggle[2] = Nearest Walkable Position(Position Of(Global.MiniEventsToggle[3]));
				Global.MiniEventsToggle[5] = Random Value In Array(Filtered Array(All Players(All Teams), Has Spawned(Current Array Element)
					&& !Is In Spawn Room(Current Array Element) && Current Array Element != Global.MiniEventsToggle[3]));
				Global.MiniEventsToggle[4] = Nearest Walkable Position(Position Of(Global.MiniEventsToggle[5]));
				Teleport(Global.MiniEventsToggle[3], Global.MiniEventsToggle[4]);
				Teleport(Global.MiniEventsToggle[5], Global.MiniEventsToggle[2]);
				Play Effect(Local Player, Buff Explosion Sound, Color(White), Local Player, 99999);
			End;
			Global.counter = 0;
			Global.EventInProgress = 0;
			disabled Set Move Speed(All Living Players(All Teams), 100);
		Else If(Count Of(Remove From Array(Global.Event_7, 0)) >= 3 && Last Of(Sorted Array(Global.Event_final, Current Array Element))
				== Count Of(Remove From Array(Global.Event_7, 0)));
			Global.EventInProgress = 2;
			Small Message(All Players(All Teams), Custom String("Green Light/Red Light Event Chosen. Do note move on red!"));
			Wait(4, Ignore Condition);
			Play Effect(Local Player, Ring Explosion Sound, Color(White), Local Player, 99999);
			Global.Event_CD = 10;
			Chase Global Variable Over Time(Event_CD, 0, 10, Destination and Duration);
			Global.Event_true = 2;
			Wait(0.300, Ignore Condition);
			Global.greenredlights = True;
			Wait(2.500, Ignore Condition);
			Global.greenredlights = False;
			Destroy Effect(Local Player.CustomEffects);
			Global.EventInProgress = 0;
			disabled Else If(Count Of(Remove From Array(Global.EventLoop, 0)) >= 4 && Last Of(Sorted Array(Global.Event_final, Current Array Element))
				== Count Of(Remove From Array(Global.EventLoop, 0)));
			disabled Global.Event_CD = 10;
			disabled Global.Event_true = 2;
			disabled Big Message(All Players(All Teams), Custom String("You have been... recalibrated."));
		Else If(Count Of(Remove From Array(Global.Custom_CD, 0)) >= 2 && Last Of(Sorted Array(Global.Event_final, Current Array Element))
				== Count Of(Remove From Array(Global.Custom_CD, 0)));
			Global.Event_CD = 5;
			Chase Global Variable Over Time(Event_CD, 0, 5, Destination and Duration);
			Global.Event_true = 2;
			Global.MiniEventsToggle[2] = Random Value In Array(Array(0, 1));
			If(Global.MiniEventsToggle[2] == 0);
				Global.EventInProgress = 3;
				Global.MiniEventsToggle[3] = Random Value In Array(All Dead Players(Team 2));
				disabled Teleport(Global.MiniEventsToggle[3], Nearest Walkable Position(Position Of(Global.MiniEventsToggle[3])));
				disabled Wait(0.250, Ignore Condition);
				Respawn(Global.MiniEventsToggle[3]);
				Clear Status(Global.MiniEventsToggle[3], Burning);
				Wait(4.500, Ignore Condition);
				disabled Global.MiniEventsToggle[2] = Null;
				disabled Global.MiniEventsToggle[3] = Null;
				disabled Global.MiniEventsToggle = Null;
			Else;
				Small Message(All Dead Players(All Teams), Custom String("The gods have chosen to not resurrect anyone.."));
			End;
			Global.EventInProgress = 0;
		Else;
			Small Message(All Dead Players(All Teams), Custom String("Spectators couldn't decide.."));
		End;
		Global.Event_1 = 0;
		Global.Event_2 = 0;
		Global.Event_3 = 0;
		Global.Event_4 = 0;
		Global.Event_5 = 0;
		Global.Event_6 = 0;
		Global.Event_7 = 0;
		Global.EventLoop = 0;
		Global.Custom_CD = 0;
		Global.EventInProgress = 0;
		Global.Event_final = Empty Array;
		Global.Event_true = 0;
	}
}

disabled rule("ability 1 vote / Implemented by Halex (borrowed from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Event_true == 1;
		(Is Button Held(Event Player, Button(Ability 1)) && Is Button Held(Event Player, Button(Crouch))) == True;
		Array Contains(Global.Event_1, Event Player) == False;
		Event Player.vote_cd == 0;
	}

	actions
	{
		Modify Global Variable(Event_1, Append To Array, Event Player);
		Modify Global Variable(Event_2, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_3, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_4, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_5, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_6, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_7, Remove From Array By Value, Event Player);
		Modify Global Variable(EventLoop, Remove From Array By Value, Event Player);
		Modify Global Variable(Custom_CD, Remove From Array By Value, Event Player);
		Modify Global Variable(EventInProgress, Remove From Array By Value, Event Player);
		Event Player.vote_cd = 1.500;
		Chase Player Variable Over Time(Event Player, vote_cd, 0, 1.500, Destination and Duration);
	}
}

disabled rule("Melee vote / Implemented by Halex (borrowed from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Event_true == 1;
		(Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Crouch))) == True;
		Array Contains(Global.EventLoop, Event Player) == False;
		Event Player.vote_cd == 0;
	}

	actions
	{
		Modify Global Variable(EventLoop, Append To Array, Event Player);
		Modify Global Variable(Event_2, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_3, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_4, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_5, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_1, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_7, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_6, Remove From Array By Value, Event Player);
		Modify Global Variable(Custom_CD, Remove From Array By Value, Event Player);
		Modify Global Variable(EventInProgress, Remove From Array By Value, Event Player);
		Event Player.vote_cd = 1.500;
		Chase Player Variable Over Time(Event Player, vote_cd, 0, 1.500, Destination and Duration);
	}
}

disabled rule("Reload vote / Implemented by Halex (borrowed from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Event_true == 1;
		(Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch))) == True;
		Array Contains(Global.Event_7, Event Player) == False;
		Event Player.vote_cd == 0;
	}

	actions
	{
		Modify Global Variable(Event_7, Append To Array, Event Player);
		Modify Global Variable(Event_2, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_3, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_4, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_5, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_6, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_1, Remove From Array By Value, Event Player);
		Modify Global Variable(EventLoop, Remove From Array By Value, Event Player);
		Modify Global Variable(Custom_CD, Remove From Array By Value, Event Player);
		Modify Global Variable(EventInProgress, Remove From Array By Value, Event Player);
		Event Player.vote_cd = 1.500;
		Chase Player Variable Over Time(Event Player, vote_cd, 0, 1.500, Destination and Duration);
	}
}

disabled rule("Ultimate vote / Implemented by Halex (borrowed from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Event_true == 1;
		(Is Button Held(Event Player, Button(Ultimate)) && Is Button Held(Event Player, Button(Crouch))) == True;
		Array Contains(Global.Custom_CD, Event Player) == False;
		Event Player.vote_cd == 0;
	}

	actions
	{
		Modify Global Variable(Custom_CD, Append To Array, Event Player);
		Modify Global Variable(Event_2, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_3, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_4, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_5, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_6, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_7, Remove From Array By Value, Event Player);
		Modify Global Variable(EventLoop, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_1, Remove From Array By Value, Event Player);
		Modify Global Variable(EventInProgress, Remove From Array By Value, Event Player);
		Event Player.vote_cd = 1.500;
		Chase Player Variable Over Time(Event Player, vote_cd, 0, 1.500, Destination and Duration);
	}
}

disabled rule("Crouch vote / Implemented by Halex (borrowed from Jibeon#2525's black hole code)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Event_true == 1;
		(Is Button Held(Event Player, Button(Interact)) && Is Button Held(Event Player, Button(Crouch))) == True;
		Array Contains(Global.EventInProgress, Event Player) == False;
		Event Player.vote_cd == 0;
	}

	actions
	{
		Modify Global Variable(EventInProgress, Append To Array, Event Player);
		Modify Global Variable(Event_2, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_3, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_4, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_5, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_6, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_7, Remove From Array By Value, Event Player);
		Modify Global Variable(EventLoop, Remove From Array By Value, Event Player);
		Modify Global Variable(Custom_CD, Remove From Array By Value, Event Player);
		Modify Global Variable(Event_1, Remove From Array By Value, Event Player);
		Event Player.vote_cd = 1.500;
		Chase Player Variable Over Time(Event Player, vote_cd, 0, 1.500, Destination and Duration);
	}
}

disabled rule("Klinok - Red Light / Green Light")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.greenredlights == True;
		Is Alive(Event Player) == True;
		(False || X Component Of(Throttle Of(Event Player)) != 0 || Is On Wall(Event Player) || Z Component Of(Throttle Of(Event Player))
			!= 0 || (Is Communicating Any Emote(Event Player) && Is Moving(Event Player))) == True;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Wait(0.050, Ignore Condition);
		Kill(Event Player, Null);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 200);
		disabled Wait(1, Abort When False);
		disabled Loop If Condition Is True;
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Eye Position(Event Player), 3);
	}
}

disabled rule("RG - G Sphere")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Alive(Event Player) == True;
		Global.EventInProgress == 2;
		Global.greenredlights != True;
	}

	actions
	{
		Destroy Effect(Event Player.CustomEffects);
		Create Effect(All Players(Team 2), Sphere, Color(Green), Event Player, 1.500, Visible To Position and Radius);
		Event Player.CustomEffects = Last Created Entity;
	}
}

disabled rule("RG - R Sphere")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Alive(Event Player) == True;
		Global.EventInProgress == 2;
		Global.greenredlights == True;
	}

	actions
	{
		Destroy Effect(Event Player.CustomEffects);
		Create Effect(All Players(Team 2), Sphere, Color(Red), Event Player, 1.500, Visible To Position and Radius);
		Event Player.CustomEffects = Last Created Entity;
	}
}

disabled rule("RG - R Sphere")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.CustomEffects != Null;
		disabled Is Alive(Event Player) == True;
		Global.EventInProgress != 2;
		Global.greenredlights != True;
	}

	actions
	{
		Destroy Effect(Event Player.CustomEffects);
		disabled Create Effect(All Players(Team 2), Sphere, Color(Red), Event Player, 2, Visible To Position and Radius);
		disabled Event Player.CustomEffects = Last Created Entity;
	}
}

disabled rule("Rule 214")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Enable Inspector Recording;
	}
}

rule("|| Torb || Fix")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Custom String("{0}", Event Player) == Custom String("Oniyoshi") || Custom String("{0}", Event Player) == Custom String(
			"oogieboogie") || Custom String("{0}", Event Player) == Custom String("Coldabyss")) == True;
		"@Condition eventPlayer.isHoldingButton(Button.PRIMARY_FIRE) == true\r\n@Condition eventPlayer.isHoldingButton(Button.CROUCH) == true"
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		"if eventPlayer.isHoldingButton(Button.INTERACT):\r\nif eventPlayer.isHoldingButton(Button.PRIMARY_FIRE):\r\nif eventPlayer.isHoldingButton(Button.CROUCH):\r\nPermission Check"
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		"if eventPlayer.Target_Lock == null:\r\n        return\r\nNote: this '__while__' had no 'end' action."
		If(Is Button Held(Event Player, Button(Primary Fire)) && Is Button Held(Event Player, Button(Secondary Fire)));
			Remove Player(Event Player.Target_Lock);
	}
}

rule("|| Torb || Fix 2 if fix 1 doesnt work")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Custom String("{0}", Event Player) == Custom String("Oniyoshi") || Custom String("{0}", Event Player) == Custom String(
			"Coldabyss") || Custom String("{0}", Event Player) == Custom String("oogieboogie")) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Hero Icon String(Hero Of(Player Closest To Reticle(Event Player, All Teams))), Custom String("{0}",
			Player Closest To Reticle(Event Player, All Teams)), Null, Top, 4, Color(White), Color(Red), Color(White),
			Visible To and String, Visible Never);
		Event Player.Target = Last Text ID;
	}
}

rule("|| Torb || Stun 0.5 on Primary")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Stunned, 0.500);
		Heal(Event Player, Event Player, 10);
	}
}

rule("|| Ram || Slow Seekerz Down Xd")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Ramattra;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 3);
	}
}

rule("hamster small but speedy")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	actions
	{
		Start Scaling Player(Event Player, 0.555, True);
		Set Move Speed(Event Player, 101);
	}
}

rule("ashe dynam,ite slow people l ollll")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 0.750);
	}
}

rule("sojourn stun on ball freeze")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Sojourn;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Status(Victim, Event Player, Stunned, 0.700);
	}
}

rule("Cassidy freeze teehee")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Cassidy;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Set Status(Victim, Event Player, Frozen, 2);
		Apply Impulse(Victim, Up + Facing Direction Of(Event Player), 70, To World, Cancel Contrary Motion);
	}
}

rule("disable primary fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Juno);
		Hero Of(Event Player) != Hero(Ashe);
		Hero Of(Event Player) != Hero(Torbjörn);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Symmetra);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
	}
}

rule("enable primary fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Hero Of(Event Player) == Hero(Ashe);
		disabled Hero Of(Event Player) == Hero(Torbjörn);
		(Hero Of(Event Player) == Hero(Symmetra) || Hero Of(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Ashe) || Hero Of(
			Event Player) == Hero(Juno) || Hero Of(Event Player) == Hero(Torbjörn)) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		If(Hero Of(Event Player) != Hero(Symmetra));
			Set Ammo(Event Player, 0, 5);
		End;
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("widow spider kill")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Victim.seen = True;
		Set Status(Victim, Event Player, Burning, 999);
		Wait Until(Event Player.seen == False, 99999);
		Clear Status(Victim, Burning);
	}
}

rule("Rule 225")
{
	event
	{
		Ongoing - Global;
	}
}

rule("widow")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Target_Arrow_ID || Event Player.eblinded) == True;
	}

	actions
	{
		Wait(5, Restart When True);
		Event Player.Target_Arrow_ID = False;
		Event Player.eblinded = False;
	}
}

rule("widow")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Hero Being Played(Hero(Widowmaker), All Teams) == True;
	}

	actions
	{
		Abort If(Global.orbwidow == 1);
		Create Effect(Filtered Array(All Players(All Teams), Current Array Element.Target_Arrow_ID == True), Sphere, Color(Red),
			Local Player, 200, Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), Current Array Element.Target_Arrow_ID == True), Orb, Color(Black),
			Eye Position(Local Player) + World Vector Of(Vector(0, 0, 0.800), Local Player, Rotation), 5, Visible To Position and Radius);
		Global.orbwidow = 1;
	}
}

rule("Widow - Create Jail")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		"@Condition eventPlayer.Spell_Value2 == 0"
		Event Player.Spell_Value2 = 15;
		Event Player.Spell_Value3 = Custom String("TIME OUT");
		Event Player.Spell_Value4 = Ray Cast Hit Position(Eye Position(Victim), Eye Position(Victim) + Vector(0, -1, 0), All Players(
			All Teams), Event Player, True);
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Event Player.Spell_Value4, 4, Visible To Position and Radius);
		Event Player.Spell_Effect1 = Last Created Entity;
		Wait(5, Ignore Condition);
		Destroy Effect(Event Player.Spell_Effect1);
		Event Player.Spell_Value4 = False;
		Wait(10, Ignore Condition);
	}
}

rule("Widow  - Knockback")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Entity Exists(Event Player.Spell_Effect1) == True;
		Event Ability != Button(Primary Fire);
	}

	actions
	{
		Apply Impulse(Victim, Direction Towards(Victim, Event Player.Spell_Value4), 15, To World, Cancel Contrary Motion);
		Victim.canSee = False;
		Wait(2.500, Ignore Condition);
		Victim.canSee = True;
	}
}

rule("widow trap")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		"victim.blinded = false\r\nwait()"
		Victim.Target_Arrow_ID = True;
	}
}

rule("Rule 231")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Soldier: 76;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Set Status(Victim, Event Player, Frozen, 1);
	}
}

rule("|| Genji || Slash Laser Disable")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Genji);
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Small Message(Event Player, Custom String("Genji disabled your laser. You can shoot with your gun though"));
		Set Primary Fire Enabled(Event Player, True);
		Victim.SetStatus1 = Ability Icon String(Hero(Sombra), Button(Ultimate));
		Victim.SetStatus2 = 3.200;
		Chase Player Variable Over Time(Victim, SetStatus2, 0, 3.200, Destination and Duration);
		Victim.canSee = False;
		Wait(3.500, Ignore Condition);
		Victim.canSee = True;
		Wait(0.250, Ignore Condition);
		Victim.canSee = False;
		Wait(0.200, Ignore Condition);
		Victim.canSee = True;
		Set Primary Fire Enabled(Event Player, False);
	}
}

disabled rule("Sym Init Spawn Coordinates")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait Until(!Is In Spawn Room(Event Player), 99999);
		disabled Wait(0.250, Ignore Condition);
		Event Player.SymTPCoords = Position Of(Event Player);
		Create HUD Text(Event Player, Event Player.SymTPCoords, Null, Null, Top, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

rule("reaper smoll tp")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reaper;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.isMoving = True;
		Wait(3, Ignore Condition);
		Event Player.isMoving = False;
	}
}

rule("|| MAUGA ||")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Custom String("{0}", Event Player) == Custom String("Oniyoshi");
	}

	actions
	{
		Disable Nameplates(Event Player, All Players(All Teams));
		"@Condition eventPlayer.getCurrentHero() != Hero.SOMBRA"
		Create In-World Text(Is Alive(Local Player) && Is Alive(Event Player) == True ? Local Player : Empty Array, Custom String(
			"                         Cardi G\n\r<Chief Operations Officer♥>"), Update Every Frame(Event Player), Absolute Value(10),
			Clip Against Surfaces, Visible To Position and Color, Custom Color(Min(Max(Absolute Value(Total Time Elapsed * 50 % 1530 - 765)
			- 255, 0), 255), Min(Max(Absolute Value((Total Time Elapsed * 50 + 510) % 1530 - 765) - 255, 0), 255), Min(Max(Absolute Value((
			Total Time Elapsed * 50 + 1020) % 1530 - 765) - 255, 0), 255), 255), Visible Always);
	}
}

disabled rule("symm - Variation 1")
{
	event
	{
		Player Dealt Damage;
		All;
		Symmetra;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Set Aim Speed(Event Player, 40);
		Start Forcing Player Position(Victim, Vector(0, -1, 0) + Event Player.SymVariable, True);
		Wait Until(!Is Firing Primary(Attacker), 99999);
		"waitUntil(not eventPlayer.isFiringPrimaryFire(), 99999)"
		Stop Forcing Player Position(Victim);
		"victim.applyImpulse(Vector.DOWN, 1, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)"
		Set Aim Speed(Event Player, 100);
		Press Button(Event Player, Button(Reload));
	}
}

disabled rule("symm UI")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	actions
	{
		"eventPlayer.disallowButton(Button.ABILITY_1)"
		Event Player.SymVariable = Vector(0, 0, 0);
		Chase Player Variable At Rate(Event Player, SymVariable, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + 5 * Facing Direction Of(Event Player), Null, Event Player, True), 1000000000, Destination and Rate);
		Disallow Button(Event Player, Button(Ability 2));
	}
}

disabled rule("symm Cd")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is In Spawn Room(Event Player) != True;
		Is Firing Primary(Event Player) == True;
		Event Damage >= 0.001;
	}

	actions
	{
		disabled Wait(0.250, Abort When False);
		Event Player.RollCountdown = Total Time Elapsed + 5;
		Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Hero(Symmetra)), Ability Icon String(Hero(Symmetra),
			Button(Primary Fire))), Global.TotalTimeElapsed - Round To Integer(Event Player.RollCountdown, Up), Null, Top, 5, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Hero Of(Event Player) != Hero(Symmetra) || !Is Firing Primary(Event Player), 5);
		Destroy In-World Text(Last Text ID);
		Wait Until(Is Alive(Event Player), 99999);
		Disallow Button(Event Player, Button(Primary Fire));
		Set Ability Cooldown(Event Player, Button(Ability 2), 30);
		Wait Until(Ability Cooldown(Event Player, Button(Ability 2)) == 0, 40);
		Allow Button(Event Player, Button(Primary Fire));
	}
}

rule("reaper no tp")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Distance Between(Event Player, Global.endPos) <= 60;
	}

	actions
	{
		Small Message(Event Player, Custom String("YOU HAVE ENTERED NO TP ZONE! CANT USE TP!"));
		Disallow Button(Event Player, Button(Ability 2));
		Wait Until(Distance Between(Event Player, Global.endPos) >= 60, 99999);
		Allow Button(Event Player, Button(Ability 2));
		Small Message(Event Player, Custom String("YOU HAVE ENTERED TP ZONE!"));
	}
}

rule("symm no tp")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Distance Between(Event Player, Global.endPos) <= 60;
	}

	actions
	{
		Small Message(Event Player, Custom String("YOU HAVE ENTERED NO TP ZONE! CANT USE TP!"));
		Disallow Button(Event Player, Button(Ability 2));
		Wait Until(Distance Between(Event Player, Global.endPos) >= 60, 99999);
		Allow Button(Event Player, Button(Ability 2));
		Small Message(Event Player, Custom String("YOU HAVE ENTERED TP ZONE!"));
	}
}

rule("infotoggle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.infoToggle = True;
	}
}

rule("zenn melee knockback")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 250);
	}
}

rule("Regulars")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Array(Custom String("Senkuari"), Custom String("Pandasage"), Custom String("Seismitoad"), Custom String("Muzzled"),
			Custom String("Lamp"), Custom String("Garvantia"), Custom String("PainWarriorX"), Custom String("cherr13s"), Custom String(
			"GH0sTy"), Custom String("SushiiEk"), Custom String("Slycat9"), Custom String("Hyper"), Custom String("witch")), Custom String(
			"{0}", Event Player)) == True;
	}

	actions
	{
		"@Condition eventPlayer.getCurrentHero() != Hero.SOMBRA"
		Create In-World Text(Is Alive(Local Player) && Is Alive(Event Player) == True ? Local Player : Empty Array, Custom String(
			"Regular♥\n\r"), Update Every Frame(Event Player), Absolute Value(0.900), Clip Against Surfaces, Visible To Position and Color,
			Custom Color(Min(Max(Absolute Value(Total Time Elapsed * 50 % 1530 - 765) - 255, 0), 255), Min(Max(Absolute Value((
			Total Time Elapsed * 50 + 510) % 1530 - 765) - 255, 0), 255), Min(Max(Absolute Value((Total Time Elapsed * 50 + 1020)
			% 1530 - 765) - 255, 0), 255), 255), Visible Always);
		Event Player.regulartext = Last Text ID;
	}
}

rule("Regular Title Hide")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.canBeSeen == False;
		Array Contains(Array(Custom String("Senkuari"), Custom String("Pandasage"), Custom String("Seismitoad"), Custom String("Muzzled"),
			Custom String("Lamp"), Custom String("Garvantia"), Custom String("PainWarriorX"), Custom String("cherr13s"), Custom String(
			"GH0sTy"), Custom String("SushiiEk"), Custom String("Slycat9"), Custom String("Hyper"), Custom String("witch")), Custom String(
			"{0}", Event Player)) == True;
	}

	actions
	{
		Destroy In-World Text(Event Player.regulartext);
		Wait Until(Event Player.canBeSeen == True, 99999);
		"@Condition eventPlayer.getCurrentHero() != Hero.SOMBRA"
		Create In-World Text(Is Alive(Local Player) && Is Alive(Event Player) == True ? Local Player : Empty Array, Custom String(
			"Regular♥\n\r"), Update Every Frame(Event Player), Absolute Value(0.900), Clip Against Surfaces, Visible To Position and Color,
			Custom Color(Min(Max(Absolute Value(Total Time Elapsed * 50 % 1530 - 765) - 255, 0), 255), Min(Max(Absolute Value((
			Total Time Elapsed * 50 + 510) % 1530 - 765) - 255, 0), 255), Min(Max(Absolute Value((Total Time Elapsed * 50 + 1020)
			% 1530 - 765) - 255, 0), 255), 255), Visible Always);
		Event Player.regulartext = Last Text ID;
	}
}

rule("regularsPerk-jump1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == False;
		Event Player.Doublejump[1] == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		(Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
		Array Contains(Array(Custom String("Senkuari"), Custom String("Pandasage"), Custom String("Seismitoad"), Custom String("Muzzled"),
			Custom String("Lamp"), Custom String("Garvantia"), Custom String("PainWarriorX"), Custom String("cherr13s"), Custom String(
			"GH0sTy"), Custom String("SushiiEk"), Custom String("Oniyoshi"), Custom String("Slycat9"), Custom String("Coldabyss"),
			Custom String("oogieboogie"), Custom String("Hyper"), Custom String("witch")), Custom String("{0}", Event Player)) == True;
	}

	actions
	{
		Event Player.Doublejump[2] = True;
	}
}

rule("regularsPerk-jump2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == False;
		Event Player.Doublejump[1] == True;
		Event Player.Doublejump[2] == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		(Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
		Array Contains(Array(Custom String("Senkuari"), Custom String("Pandasage"), Custom String("Seismitoad"), Custom String("Muzzled"),
			Custom String("Lamp"), Custom String("Garvantia"), Custom String("PainWarriorX"), Custom String("cherr13s"), Custom String(
			"GH0sTy"), Custom String("SushiiEk"), Custom String("Oniyoshi"), Custom String("Slycat9"), Custom String("Coldabyss"),
			Custom String("oogieboogie"), Custom String("Hyper"), Custom String("witch")), Custom String("{0}", Event Player)) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 9, To World, Cancel Contrary Motion XYZ);
		Event Player.Doublejump[1] = False;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), World Vector Of(Vector(0, -0.100, 0), Event Player,
			Rotation And Translation), 5);
	}
}

rule("double jump check")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Array Contains(Array(Custom String("Senkuari"), Custom String("Pandasage"), Custom String("Seismitoad"), Custom String("Muzzled"),
			Custom String("Lamp"), Custom String("Garvantia"), Custom String("PainWarriorX"), Custom String("cherr13s"), Custom String(
			"GH0sTy"), Custom String("SushiiEk"), Custom String("witch"), Custom String("Oniyoshi"), Custom String("Coldabyss"),
			Custom String("Hyper"), Custom String("oogieboogie"), Custom String("Slycat9")), Custom String("{0}", Event Player)) == True;
	}

	actions
	{
		Event Player.Doublejump[1] = True;
		Event Player.Doublejump[2] = False;
	}
}

rule("regularsPerk-SeekerChance")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Array(Custom String("Senkuari"), Custom String("Pandasage"), Custom String("Seismitoad"), Custom String("Muzzled"),
			Custom String("Lamp"), Custom String("Garvantia"), Custom String("PainWarriorX"), Custom String("cherr13s"), Custom String(
			"GH0sTy"), Custom String("SushiiEk"), Custom String("Oniyoshi"), Custom String("Coldabyss"), Custom String("oogieboogie"),
			Custom String("Hyper"), Custom String("witch"), Custom String("Slycat9")), Custom String("{0}", Event Player)) == True;
	}

	actions
	{
		If(Random Value In Array(Array(1, 2, 3, 4)) == 1);
			Set Ultimate Charge(Event Player, 100);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Set Ability Cooldown(Event Player, Button(Ultimate), 0);
			Set Ability Cooldown(Event Player, Button(Interact), 0);
			Set Ability Cooldown(Event Player, Button(Jump), 0);
			Set Ability Cooldown(Event Player, Button(Crouch), 0);
			Small Message(Event Player, Custom String("BINGO! ALL OF YOUR COOLDOWNS RESET + 100% ULTIMATE CHARGE!"));
		End;
	}
}